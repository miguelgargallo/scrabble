{"version":3,"sources":["constants.js","context.js","utils.js","components/Legend.js","components/Piece.js","components/Tile.js","components/Modal.js","xhr.js","hooks.js","components/GameBoard.js","components/Connection.js","components/ScoreBoard.js","components/Notification.js","components/SwapModal.js","components/ControlButton.js","components/Audio.js","components/Controls.js","components/Bag.js","components/Rack.js","components/GameLogModal.js","components/GameLog.js","components/GamePanel.js","components/GameChooser.js","components/WaitingRoom.js","components/ResumeGame.js","components/JoinGame.js","components/NewGame.js","components/LandingPage.js","components/WinnerModal.js","containers/Game.js","App.js","reportWebVitals.js","index.js"],"names":["URL","window","apiURL","SERVER_TOKEN","b2ctk","API_URL","timeoutDelay","tileColors","normal","tripleWord","startTile","doubleLetter","tripleLetter","doubleWord","String","prototype","capitalize","this","charAt","toUpperCase","slice","toLowerCase","socket","io","transports","GameContext","React","createContext","SocketIOContext","ValidDragContext","NotificationContext","generateRandomID","size","crypto","getRandomValues","Uint32Array","toString","isAlphanumeric","str","match","countUp","number","start","end","duration","excludeMeSioEvent","sio","eventName","myName","dispatch","on","data","name","getDragData","e","JSON","parse","dataTransfer","getData","Legend","className","title","Piece","id","tileID","char","weight","onBoard","isPlayed","isStatic","isTransformed","dragEndHandler","thisPiece","useRef","useContext","validDrag","setValidDrag","useState","pieceData","handleDragEnd","stopImmediatePropagation","current","dropEffect","dragCancelled","handleDragStart","stopPropagation","setData","stringify","setDragData","handleDragDrop","preventDefault","handleDragOver","handleDragEnter","handleDragLeave","useEffect","addEventListener","weightClassNames","classNames","ref","draggable","style","top","Tile","forwardRef","props","useImperativeHandle","addPiece","piece","setPlayedPiece","removePiece","hasPiece","playedPiece","undefined","getPiece","tileType","type","prevTileID","thisTile","player","playedTiles","usedTiles","setPlayedTiles","includes","setRequestChoosePiece","pieceID","status","newPiece","emit","roomID","turn","removeEventListener","fill","strokeWidth","Modal","bag","modal","mode","Object","values","pieces","filter","map","index","onClick","modalHandler","show","axios","defaults","baseURL","headers","post","common","interceptors","request","use","error","console","log","Promise","reject","response","makeServerRequest","opts","requestType","url","payload","then","r","catch","useStateRef","defaultValue","state","setState","useCallback","val","tilePerRow","GameBoard","rows","tileRefs","pingIntervalID","setPingIntervalID","requestChoosePiece","playFlag","gameExited","setUsedTiles","setBoardState","setPlayFlag","setPlayedWords","recallFlag","setRecallFlag","toRackMove","removePieceFromTile","tID","addPieceToTile","getPlayedWords","Array","length","_","i","tileRows","tileRow","tile","el","push","getTile","refIndex","isBoardEdge","position","wv","wh","words","tileIndex","wordsTop","getPiecesInPosition","wordsLeft","wordsDown","wordsRight","v","a","findIndex","t","ind","loopLength","unshift","saveBoardState","iID","setInterval","clearInterval","height","transformedBlankPiece","Connection","icon","iconStatus","ping","setPing","setStatus","showSave","setShowSave","boardState","rackState","pingServer","saveGame","startTime","Date","endTime","pingDuration","getTime","rack","board","setTimeout","color","ScoreBoard","setBoard","players","tableRows","entries","p","tableRow","isSpeaking","score","Notification","notifications","setTimeoutNotifications","timeoutNotifications","notification","iconType","newNotification","message","SwapModal","checkBoxRefs","setShowConfirm","showConfirm","handleOnChange","checkBox","checked","onChange","swapCancelHandler","swapConfirmHandler","checkedBoxes","getCheckedBoxesIDs","descriptions","ControlButton","handler","Audio","useReactMediaRecorder","audio","askPermissionOnMount","mediaBlobUrl","clearBlobUrl","stopRecording","startRecording","setIsMuted","isMuted","setAudioBlob","audioBlob","setSpeakerName","speakerName","setPlayer","setPlayers","updatedPlayers","src","autoPlay","Controls","gameStarted","allowAudio","setControlButtons","controlButtons","buttons","isHost","draw","Bag","setShowContents","showContents","Rack","thisRack","setTryCount","tryCount","setPieces","currPieces","setStartSwap","startSwap","setCountDownID","countDownID","setPlayedPieces","currPlayedPieces","setNotifications","gameResumed","setRackState","timeToPlay","playedWords","gameEnded","setCountDown","countDown","getFromBag","getPieces","actualTurnSkip","playedWordsStr","word","join","validatePlayedWords","bagIsEmpty","rackIsEmpty","playedWord","getPlayedWord","computeScore","refillRack","intervalID","playedPieces","wordWeight","isBingo","totalScore","mul","charWeight","charTileID","charTileType","amount","returnedPieces","addToPieces","findPiece","removePieceFromPieces","addToPlayedPieces","remainingPieces","getTileRow","Math","ceil","checkedIDs","piecesSwapped","pieceToSwap","findPieceByID","isTurnSwapped","validateNeighbors","boardIsEmpty","playDirection","valid","linkCount","tiles","allTiles","source","getTileColumn","first","indexOf","last","getNeigbouringTiles","tileUp","tileDown","tileLeft","tileRight","linkedTiles","forEach","tileTC","initiatePlayPipeline","firstTile","sort","b","firstTileRow","numPlayedTiles","every","tt","getPlayDirection","neighborsAreValid","recall","overwrite","timeout","isBoardEmpty","isTurnSkipped","find","removePieceFromPlayedPieces","saveRackState","seconds","width","shuffle","arr","j","floor","random","temp","inPlaceShuffle","skip","confirm","play","swap","toISOString","substr","GameLogModal","logs","close","time","event","GameLog","setShowModal","showModal","setLogs","setGameExited","leaveHandler","alert","location","reload","GamePanel","GameChooser","setGameChoice","href","target","referrerPolicy","WaitingRoom","setConnectedPlayers","connectedPlayers","setPrepText","prepText","setGameStarted","setGameResumed","setGameCreated","setAllowAudio","setTimeToPlay","enableAudio","numPlayers","welcomeMessage","allPlayers","handleDestroyGameSession","ResumeGame","setNumPlayers","sessionID","setSessionID","sessionName","setSessionName","getGameRoomData","gameRoomID","handleResumeGameSession","gameRoomData","currentPlayer","limit","minLength","maxLength","value","trim","placeholder","JoinGame","gameJoined","setGameJoined","handleJoinGameSession","room","joinable","NewGame","copied","setCopied","gameCreated","setEnableAudio","sessionContainer","disabled","protocol","hostname","navigator","clipboard","writeText","parseInt","LandingPage","newGame","setNewGame","joinGame","setJoinGame","resumeGame","setResumeGame","choice","WinnerModal","setShow","endMessage","setEndMessage","finalMessage","winner","Game","setGameEnded","setBag","gameContext","playerToPlay","playerToPlayMessage","playOrderMessage","updatedPlayerTurns","updatedScore","getUpdatedPlayers","announcePlayResult","Set","announceBagState","turnSkips","bagLength","emptyMessage","turnPlayer","gameSpace","Provider","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.90555872.chunk.js","sourcesContent":["\n// In PROD, Jinja would pass the host url to the window object as apiURL\nconst URL = window.apiURL === '{{ ip }}' ? 'http://192.168.0.166:5005' : window.apiURL;\nconst SERVER_TOKEN = window.b2ctk === '{{ b2ctk }}' ? 'ScrabbleDevToken' : window.b2ctk;\n\nconst API_URL = `${URL}/api/v1`;\n\nconst IO_TRANSPORTS = {\n    transports: [\"websocket\", \"polling\"],\n}\n\nconst timeoutDelay = 20000;  // 20s\n\nconst tileColors = {\n    normal: \"bg-white\",\n    tripleWord: \"bg-red-700\",\n    startTile: \"bg-gray-500\",\n    doubleLetter: \"bg-blue-400\",\n    tripleLetter: \"bg-blue-800\",\n    doubleWord: \"bg-yellow-500\",\n}\n\n\n// Allow string capitalization (\"\".capitalize())\nString.prototype.capitalize = function () {\n    return this.charAt(0).toUpperCase() + this.slice(1).toLowerCase();\n}\n\nexport { URL };\nexport { API_URL };\nexport { tileColors };\nexport { timeoutDelay }\nexport { SERVER_TOKEN };\nexport { IO_TRANSPORTS };","import React from 'react';\nimport { io } from 'socket.io-client';\nimport { URL, IO_TRANSPORTS } from './constants';\n\n\nconst socket = io(URL, IO_TRANSPORTS);\n\nconst GameContext = React.createContext();\nconst SocketIOContext = React.createContext();\nconst ValidDragContext = React.createContext();\nconst NotificationContext = React.createContext();\n\nexport { socket };\nexport { GameContext };\nexport { SocketIOContext };\nexport { ValidDragContext };\nexport { NotificationContext };\n","// Helper functions\nimport CountUp from 'react-countup';\n\n\nconst inPlaceShuffle = (arr) => {\n\n    for (let i = arr.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        let temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n\n    return arr;\n}\n\nconst secondsToMMSS = (seconds) => new Date(seconds * 1000).toISOString().substr(14, 5);\n\nconst generateRandomID = (size) => {\n    return window.crypto\n        .getRandomValues(new Uint32Array(1))[0]\n        .toString()\n        .slice(0, size);\n}\n\nconst isAlphanumeric = (str) => str.match(/^[0-9a-zA-Z]+$/);\n\nconst countUp = (number) => {\n    return <CountUp start={number} end={number} duration={1.5} />\n}\n\nconst countDown = (number) => {\n    return <CountUp start={number + 7} end={number} duration={1.5} />\n}\n\nconst excludeMeSioEvent = (sio, eventName, myName, dispatch) => {\n    sio.on(eventName, (data) => {\n        if (data.name !== myName) dispatch(data);\n    });\n};\n\nconst dragCancelled = (e) => e.dataTransfer.dropEffect === \"none\";\nconst getDragData = (e) => JSON.parse(e.dataTransfer.getData(\"draggedPiece\"));\nconst setDragData = (e, data) => e.dataTransfer.setData(\"draggedPiece\", JSON.stringify(data));\n\nexport { countUp };\nexport { countDown };\nexport { setDragData };\nexport { getDragData };\nexport { dragCancelled };\nexport { secondsToMMSS };\nexport { inPlaceShuffle };\nexport { isAlphanumeric };\nexport { generateRandomID };\nexport { excludeMeSioEvent };","import React from 'react';\nimport { tileColors } from '../constants';\n\n\nconst Legend = () => {\n\n    return (\n        <div className=\"block\">\n            <div className=\"flex\">\n                <div title=\"A piece must be played on this tile at the beginning of the game\" className=\"flex-1\"><span className={`${tileColors[\"startTile\"]} pr-5 h-6 w-8 border-2 border-black`}></span><span className=\"pl-2\">Start Point</span></div>\n                <div title=\"The total score of the letter on this tile is doubled\" className=\"flex-1\"><span className={`${tileColors[\"doubleLetter\"]} pr-5 h-6 w-8 border-2 border-black`}></span><span className=\"pl-2\">Double Letter</span></div>\n                <div title=\"The total score of the letter on this tile is tripled\" className=\"flex-1\"><span className={`${tileColors[\"tripleLetter\"]} pr-5 h-6 w-8 border-2 border-black`}></span><span className=\"pl-2\">Triple Letter</span></div>\n                <div title=\"The total score of the word played is doubled when a piece is on this tile\" className=\"flex-1\"><span className={`${tileColors[\"doubleWord\"]} pr-5 h-6 w-8 border-2 border-black`}></span><span className=\"pl-2\">Double Word</span></div>\n                <div title=\"The total score of the word played is tripled when a piece is on this tile\" className=\"flex-1\"><span className={`${tileColors[\"tripleWord\"]} pr-5 h-6 w-8 border-2 border-black`}></span><span className=\"pl-2\">Triple Word</span></div>\n            </div>\n        </div>\n    )\n};\n\nexport default Legend;","// A scrabble piece\n\nimport React, { useState, useEffect, useRef, useContext } from 'react';\nimport { setDragData, dragCancelled } from '../utils';\nimport { ValidDragContext } from '../context';\n\n\nconst Piece = ({\n    id,\n    tileID,\n    char,\n    weight,\n    onBoard,\n    isPlayed,\n    isStatic,\n    isTransformed,\n    dragEndHandler,\n}) => {\n\n    const thisPiece = useRef();\n\n    const { validDrag, setValidDrag } = useContext(ValidDragContext);\n    const [pieceData, setPieceData] = useState({ id, tileID, char, weight, onBoard, isTransformed, isStatic, isPlayed });\n\n    // Event listeners handlers\n\n    // Call handler function on drag end\n    const handleDragEnd = (e) => {\n        e.stopImmediatePropagation();\n        if (dragEndHandler // Associated handling function\n            && validDrag.current // Drag is valid\n            && !dragCancelled(e)) //  Drag wasn't cancelled\n            dragEndHandler(pieceData)\n    };\n\n    // Save piece metadata on drag start\n    const handleDragStart = (e) => {\n        // Prevent bubble\n        e.stopPropagation();\n        e.stopImmediatePropagation();\n\n        setValidDrag(true) // Reset prev drag context\n        setDragData(e, pieceData); // Save piece data\n    };\n\n\n    // Pieces should not be dropped on pieces\n    const handleDragDrop = (e) => {\n        // Prevent bubble\n        e.preventDefault();\n        e.stopPropagation();\n        e.stopImmediatePropagation();\n        setValidDrag(false); // Prevent drag end update\n    }\n\n    // [Naturally], prevent default\n    const handleDragOver = (e) => e.preventDefault();\n    const handleDragEnter = (e) => e.preventDefault();\n    const handleDragLeave = (e) => e.preventDefault();\n\n\n    // Effect Listeners\n    useEffect(() => thisPiece.current.addEventListener(\"drop\", handleDragDrop));\n    useEffect(() => thisPiece.current.addEventListener(\"dragend\", handleDragEnd));\n    useEffect(() => thisPiece.current.addEventListener(\"dragover\", handleDragOver));\n    useEffect(() => thisPiece.current.addEventListener(\"dragleave\", handleDragLeave));\n    useEffect(() => thisPiece.current.addEventListener(\"dragstart\", handleDragStart));\n    useEffect(() => thisPiece.current.addEventListener(\"dragenter\", handleDragEnter));\n\n\n    // Custom class names depending on piece\n    let weightClassNames = pieceData.weight < 10 ? \"absolute relative right-0.5 bottom-0.5\" : \"absolute relative right-1.5 bottom-0.5\"\n    let classNames = `${isStatic ? \"h-3/4\" : \"h-full\"} ${isTransformed ? \"bg-yellow-300\" : \"\"} ${pieceData.char === \" \" ? \"flex-col-reverse\" : \"\"} cursor-pointer hover:text-gray-700 flex flex-col ${onBoard ? \"w-full\" : \"w-14 border\"} text-black bg-yellow-200 border-black`;\n\n    return (\n        <div ref={thisPiece} draggable={!isPlayed} className={classNames}>\n            <div className=\"block self-center w-4/5 text-4xl font-bold\">\n                <span style={{ top: \"0.4rem\" }} className={`absolute ${isTransformed ? \"italic pr-2\" : \"\"} relative`}>\n                    {pieceData.char}\n                </span>\n            </div>\n            <div className=\"block self-end w-1/5 text-xs\">\n                <span className={weightClassNames}>\n                    {pieceData.weight}\n                </span>\n            </div>\n        </div>\n    )\n};\n\nexport default Piece;","import React, { useState, useEffect, useRef, forwardRef, useImperativeHandle, useContext } from 'react';\nimport { GameContext, SocketIOContext } from '../context';\nimport { tileColors } from '../constants';\nimport { getDragData } from '../utils';\nimport { Star } from 'react-feather';\nimport Piece from './Piece';\n\nconst Tile = forwardRef((props, ref) => {\n\n    // The component instance will be extended\n    // with whatever you return from the callback passed\n    // as the second argument\n    useImperativeHandle(ref, () => ({\n\n        addPiece(piece) {\n            setPlayedPiece(piece);\n        },\n\n        removePiece() {\n            setPlayedPiece(null);\n        },\n\n        hasPiece() {\n            return playedPiece !== null && playedPiece !== undefined;\n        },\n\n        getPiece() {\n            return { ...playedPiece.props, tileType: props.type };\n        },\n\n    }));\n\n    let prevTileID = \"\";\n    const type = props.type;\n    const tileID = props.id;\n\n    const thisTile = useRef();\n    const sio = useContext(SocketIOContext);\n    const [playedPiece, setPlayedPiece] = useState(props.playedPiece);\n    const { player, playedTiles, usedTiles, setPlayedTiles } = useContext(GameContext);\n\n\n    // Helper functions \n\n    // On drag end, remove piece if necessary\n    // New tile will have newly-created piece\n    const dragEndHandler = (pieceData) => {\n        // If it isn't a cemented tile\n        if (!usedTiles.current.includes(pieceData.tileID)) {\n            if (prevTileID !== tileID) {\n                setPlayedPiece(null);\n            }\n        }\n    }\n\n    // Event listeners\n    const handleDragDrop = (e) => {\n        // Data of piece dragged on this tile      \n        const pieceData = getDragData(e);\n\n        // If it isn't a cemented tile\n        if (!usedTiles.current.includes(pieceData.tileID)) {\n            e.preventDefault();\n            e.stopPropagation();\n            e.stopImmediatePropagation();\n\n            let id = pieceData['id'];\n            let char = pieceData['char'];\n            let weight = pieceData['weight'];\n            let isTransformed = pieceData['isTransformed'];\n\n            // Keep the previous tile id\n            prevTileID = pieceData['tileID'];\n\n            if (char === \" \") {\n                // Initiate Show modal. Also save the original pieceID and this tileID\n                props.setRequestChoosePiece({ tileID: tileID, pieceID: id, status: true });\n            }\n            else {\n                // Off modal/Reset modal pipeline\n                props.setRequestChoosePiece({ tileID: \"\", pieceID: id, status: false });\n\n                let newPiece = <Piece\n                    id={id}\n                    char={char}\n                    onBoard={true}\n                    weight={weight}\n                    tileID={tileID}\n                    isTransformed={isTransformed}\n                    dragEndHandler={dragEndHandler}\n                />;\n\n                // Tell other players\n                sio.emit('inPlayEvent', {\n                    roomID: player.current.roomID,\n                    pieceData: {\n                        id,\n                        char,\n                        weight,\n                        tileID,\n                        prevTileID,\n                        isTransformed,\n                        onBoard: true,\n                    }\n                });\n                // Update parent with new tile-piece association\n                setPlayedTiles([...playedTiles.current, tileID]);\n                setPlayedPiece(newPiece); // Associate piece with Tile\n            }\n        }\n    }\n\n    const handleDragOver = (e) => e.preventDefault();\n    const handleDragEnter = (e) => e.preventDefault();\n    const handleDragLeave = (e) => e.preventDefault();\n\n\n    // Effects\n    // Use turn of player to register and unregister event handlers\n    // Essentially, turn off tile-listening ability if it's not player's\n    // turn; and, of course, turn it back on if it's his/her turn?\n    useEffect(() => {\n        if (player.current.turn) thisTile.current.addEventListener(\"drop\", handleDragDrop);\n        else thisTile.current.removeEventListener(\"drop\", handleDragDrop);\n        return () => thisTile.current.removeEventListener(\"drop\", handleDragDrop);\n    }, [player.current.turn]);\n\n    useEffect(() => {\n        if (player.current.turn) thisTile.current.addEventListener(\"dragover\", handleDragOver);\n        else thisTile.current.removeEventListener(\"dragover\", handleDragOver);\n        return () => thisTile.current.removeEventListener(\"dragover\", handleDragOver);\n    }, [player.current.turn]);\n\n    useEffect(() => {\n        if (player.current.turn) thisTile.current.addEventListener(\"dragleave\", handleDragLeave);\n        else thisTile.current.removeEventListener(\"dragleave\", handleDragLeave);\n        return () => thisTile.current.removeEventListener(\"dragleave\", handleDragLeave);\n    }, [player.current.turn]);\n\n    useEffect(() => {\n        if (player.current.turn) thisTile.current.addEventListener(\"dragenter\", handleDragEnter);\n        else thisTile.current.removeEventListener(\"dragenter\", handleDragEnter);\n        return () => thisTile.current.removeEventListener(\"dragenter\", handleDragEnter)\n    }, [player.current.turn]);\n\n\n    return (\n        <div id={tileID} ref={thisTile} className={`${tileColors[type]} flex flex-col justify-around items-center h-14 w-14 border border-black border-opacity-70`}>\n            {(props.type === \"startTile\") && !playedPiece ?\n                <div className=\"justify-center items-center\">\n                    <Star fill=\"white\" strokeWidth=\"0\" size={24} />\n                </div> : null}\n            {playedPiece}\n        </div>\n    )\n});\n\nexport default Tile;","import React, { useContext } from \"react\";\nimport { GameContext } from \"../context\";\nimport Piece from \"./Piece\";\n\nexport default function Modal(props) {\n    const { bag } = useContext(GameContext);\n\n    let modal =\n        props.mode === \"chooseLetter\" // Choose a letter\n            ? <>\n                <div className=\"justify-center items-center flex overflow-x-hidden overflow-y-auto fixed inset-0 z-50 outline-none focus:outline-none\">\n                    <div className=\"relative w-auto my-6 mx-auto max-w-3xl\">\n                        <div className=\"border-0 rounded-lg shadow-lg relative flex flex-col w-full bg-white outline-none focus:outline-none\">\n                            <div className=\"flex justify-center flex-col pt-7 p-3 border-b border-solid border-blueGray-200 rounded-t\">\n                                <h3 className=\"text-2xl font-semibold\">\n                                    Wildcard Transformation\n                                </h3>\n                                <div className=\"text-md pt-1 text-gray-500\">Choose a piece to replace the wildcard with</div>\n                            </div>\n                            <div className=\"relative pt-7 p-10 flex justify-center flex-wrap\">\n                                {\n                                    Object.values(bag.current.pieces).filter((piece) => piece.piece !== \" \").map((piece, index) => {\n                                        return (\n                                            <div key={index} onClick={() => props.modalHandler(piece.piece)} className=\"mx-4 my-4\">\n                                                <Piece char={piece.piece} weight={0} />\n                                            </div>\n                                        );\n                                    })\n                                }\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"opacity-75 fixed inset-0 z-40 bg-black\"></div>\n            </>\n            : // Normal showing on bag click\n            <>\n                <div className=\"justify-center items-center flex overflow-x-hidden overflow-y-auto fixed inset-0 z-50 outline-none focus:outline-none\">\n                    <div className=\"relative w-auto my-6 mx-auto max-w-3xl\">\n                        <div className=\"border-0 rounded-lg shadow-lg relative flex flex-col w-full bg-white outline-none focus:outline-none\">\n                            <div className=\"flex items-start justify-center pt-5 p-4 border-b border-solid border-blueGray-200 rounded-t\">\n                                <h3 className=\"text-2xl font-semibold\">\n                                    Contents of the Scrabble Bag\n                                </h3>\n                            </div>\n                            <div className=\"relative pt-7 p-10 flex justify-center flex-wrap\">\n                                {\n                                    Object.values(bag.current.pieces).map((piece, index) => {\n                                        return (\n                                            <div key={index} className=\"mx-4 my-4\">\n                                                <Piece isStatic={true} char={piece.piece} weight={piece.weight} />\n                                                <div className=\"self-center mt-1 text-xs text-gray-900\">\n                                                    {piece.number} left\n                                                </div>\n                                            </div>\n                                        );\n                                    })\n                                }\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"opacity-75 fixed inset-0 z-40 bg-black\"></div>\n            </>\n\n    return (props.show ? modal : null);\n}","import axios from 'axios';\nimport { API_URL, SERVER_TOKEN } from './constants'\n\naxios.defaults.baseURL = API_URL;\naxios.defaults.headers.post['Content-Type'] = 'application/json';\naxios.defaults.headers.common['Authorization'] = `Bearer ${SERVER_TOKEN}`;\n\naxios.interceptors.request.use(request => {\n    // console.log(request);\n    // Edit request config\n    return request;\n}, error => {\n    console.log(error);\n    return Promise.reject(error);\n});\n\naxios.interceptors.response.use(response => {\n    // console.log(response);\n    // Edit response config\n    return response;\n}, error => {\n    console.log(error);\n    return Promise.reject(error);\n});\n\nconst makeServerRequest = (opts) => {\n    // Payload is params for GET and same for POST\n    return axios[opts.requestType](opts.url, opts.payload)\n        .then(r => r.data)\n        .catch(e => console.log(e.data));\n}\n\nexport default makeServerRequest;","import { useEffect, useRef, useState, useCallback } from 'react';\nimport makeServerRequest from './xhr';\n\n\nfunction useFetch(requestParams) {\n    const [data, setData] = useState();\n\n    useEffect(() => {\n        const goGet = async () => {\n            const response = await makeServerRequest(requestParams);\n            setData(response);\n        }\n        goGet();\n    }, [requestParams.url]);\n    return data;\n}\n\n\nfunction useStateRef(defaultValue) {\n    let [state, setState] = useState(defaultValue)\n    let ref = useRef(state)\n\n    let dispatch = useCallback(function (val) {\n        ref.current = typeof val === \"function\" ?\n            val(ref.current) : val\n\n        setState(ref.current)\n    }, []);\n\n    return [state, dispatch, ref]\n}\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n      case true: return true \n      default: return false\n     }\n  }\n\nfunction useEventListener(eventName, handler, element = window) {\n    const savedHandler = useRef();\n\n    useEffect(() => {\n        savedHandler.current = handler;\n    }, [handler]);\n\n    useEffect(\n        () => {\n            // Make sure element supports addEventListener\n            const isSupported = element && element.addEventListener;\n            if (!isSupported) return;\n            // Create event listener that calls handler function stored in ref\n            const eventListener = (event) => savedHandler.current(event);\n            // Add event listener\n            element.addEventListener(eventName, eventListener);\n            // Remove event listener on cleanup\n            return () => {\n                element.removeEventListener(eventName, eventListener);\n            };\n        },\n        [eventName, element] // Re-run if eventName or element changes\n    );\n}\n\nexport { reducer };\nexport { useFetch };\nexport { useStateRef };\nexport { useEventListener };","import React, { useContext, useState, useEffect, useRef } from 'react';\nimport { GameContext, SocketIOContext } from '../context';\nimport { excludeMeSioEvent } from '../utils';\nimport Legend from './Legend';\nimport Piece from './Piece';\nimport Tile from './Tile';\nimport Modal from './Modal';\nimport { useStateRef } from '../hooks';\nimport { timeoutDelay } from '../constants';\n\n\n// 15 tiles per row\nconst tilePerRow = 15;\nconst GameBoard = (props) => {\n\n    let rows = [];\n    const tileRefs = useRef([]);\n    const [pingIntervalID, setPingIntervalID] = useState();\n\n    const sio = useContext(SocketIOContext);\n    const [_, setRequestChoosePiece, requestChoosePiece] = useStateRef({ tileID: \"\", pieceID: \"\", status: false });\n    const { player, playFlag, gameExited, setUsedTiles, setBoardState, usedTiles, setPlayFlag, playedTiles, setPlayedWords, setPlayedTiles, recallFlag, setRecallFlag } = useContext(GameContext);\n\n\n    // Register Event Listeners\n    useEffect(() => {\n        const dispatch = ({ pieceData }) => {\n            let newPiece = <Piece\n                isPlayed={false}\n                id={pieceData.id}\n                char={pieceData.char}\n                weight={pieceData.weight}\n                tileID={pieceData.tileID}\n                onBoard={pieceData.onBoard}\n                isTransformed={pieceData.isTransformed}\n            />;\n\n            // [Board/Rack]-Rack. Piece diasppears. Ensure other player's played tiles cannot be dragged to own rack\n            if (pieceData.toRackMove) {\n                if (pieceData.tileID && !usedTiles.current.includes(pieceData.tileID)) {\n                    // Board-Rack. Remove from board\n                    removePieceFromTile(pieceData.tileID);\n                    setPlayedTiles(playedTiles.current.filter((tID) => tID !== pieceData.tileID));\n                    // Rack-Rack. Do nothing.\n                }\n            }\n            // [Rack/Board]-Board. Piece appears\n            else {\n                // If previous piece, remove it. (Board-Board)\n                if (pieceData.prevTileID) {\n                    removePieceFromTile(pieceData.prevTileID);\n                    setPlayedTiles(playedTiles.current.filter((tID) => tID !== pieceData.prevTileID))\n                }\n                // Eventually add new piece ([Rack/Board]-Board)\n                addPieceToTile(pieceData.tileID, newPiece);\n\n                // Save played tiles if it's not me that played. Incase the player calls a recall\n                if (!player.current.turn) setPlayedTiles([...playedTiles.current, pieceData.tileID]);\n            }\n        }\n\n        // Add played piece to board for every player\n        excludeMeSioEvent(sio, \"inPlay\", player.current.name, dispatch)\n    }, [player.current]);\n\n\n    // Register Event Listeners\n    useEffect(() => {\n        // Recall pieces for every player except me\n        const dispatch = (data) => setRecallFlag(true);\n        excludeMeSioEvent(sio, \"recallPieces\", player.current.name, dispatch)\n    }, [player.current]);\n\n\n    // Remove tile pieces if recall is pressed on Rack\n    useEffect(() => {\n        if (recallFlag.current) {\n            for (const tileID of playedTiles.current) {\n                removePieceFromTile(tileID);\n            }\n            setRecallFlag(false);\n            setPlayedTiles([]);\n        }\n    }, [recallFlag.current]);\n\n\n    // Remove tile pieces if recall is pressed on Rack\n    useEffect(() => {\n        if (playFlag.current) {\n            setPlayedWords(getPlayedWords());\n            setPlayFlag(false);\n        }\n    }, [playFlag.current]);\n\n\n    // Create new ref to each tile until all tiles have been referenced\n    useEffect(() => {\n        tileRefs.current = Array(rows.length * tilePerRow)\n            .fill().map((_, i) => tileRefs.current[i]);\n    }, [rows.length]);\n\n\n    // Create all tiles\n    for (let index = 0; index < tilePerRow; index++) {\n        let tileRows = [];\n        let tileRow = (index * tilePerRow);\n\n        if (index === 0 || index === 14) {\n            for (let i = 0; i < tilePerRow; i++) {\n                let tileType = \"normal\";\n                if (i === 3 || i === 11) tileType = \"doubleLetter\";\n                if (i === 0 || i === 7 || i === 14) tileType = \"tripleWord\";\n                let tile = <Tile\n                    type={tileType}\n                    id={tileRow + i}\n                    setRequestChoosePiece={setRequestChoosePiece}\n                    key={tileRow + i}\n                    ref={el => tileRefs.current[tileRow + i] = el}\n                />;\n                tileRows.push(tile);\n            }\n        }\n        if (index === 1 || index === 13) {\n            for (let i = 0; i < tilePerRow; i++) {\n                let tileType = \"normal\";\n                if (i === 1 || i === 13) tileType = \"doubleWord\";\n                if (i === 5 || i === 9) tileType = \"tripleLetter\";\n                let tile = <Tile\n                    type={tileType}\n                    id={tileRow + i}\n                    setRequestChoosePiece={setRequestChoosePiece}\n                    key={tileRow + i}\n                    ref={el => tileRefs.current[tileRow + i] = el}\n                />;\n                tileRows.push(tile);\n            }\n        }\n        if (index === 2 || index === 12) {\n            for (let i = 0; i < tilePerRow; i++) {\n                let tileType = \"normal\";\n                if (i === 2 || i === 12) tileType = \"doubleWord\";\n                if (i === 6 || i === 8) tileType = \"doubleLetter\";\n                let tile = <Tile\n                    type={tileType}\n                    id={tileRow + i}\n                    setRequestChoosePiece={setRequestChoosePiece}\n                    key={tileRow + i}\n                    ref={el => tileRefs.current[tileRow + i] = el}\n                />;\n                tileRows.push(tile);\n            }\n        }\n        if (index === 3 || index === 11) {\n            for (let i = 0; i < tilePerRow; i++) {\n                let tileType = \"normal\";\n                if (i === 3 || i === 11) tileType = \"doubleWord\";\n                if (i === 0 || i === 7 || i === 14) tileType = \"doubleLetter\";\n                let tile = <Tile\n                    type={tileType}\n                    id={tileRow + i}\n                    setRequestChoosePiece={setRequestChoosePiece}\n                    key={tileRow + i}\n                    ref={el => tileRefs.current[tileRow + i] = el}\n                />;\n                tileRows.push(tile);\n            }\n        }\n        if (index === 4 || index === 10) {\n            for (let i = 0; i < tilePerRow; i++) {\n                let tileType = \"normal\";\n                if (i === 4 || i === 10) tileType = \"doubleWord\";\n                let tile = <Tile\n                    type={tileType}\n                    id={tileRow + i}\n                    setRequestChoosePiece={setRequestChoosePiece}\n                    key={tileRow + i}\n                    ref={el => tileRefs.current[tileRow + i] = el}\n                />;\n                tileRows.push(tile);\n            }\n        }\n        if (index === 5 || index === 9) {\n            for (let i = 0; i < tilePerRow; i++) {\n                let tileType = \"normal\";\n                if (i === 5 || i === 9 || i === 1 || i === 13) tileType = \"tripleLetter\";\n                let tile = <Tile\n                    type={tileType}\n                    id={tileRow + i}\n                    setRequestChoosePiece={setRequestChoosePiece}\n                    key={tileRow + i}\n                    ref={el => tileRefs.current[tileRow + i] = el}\n                />;\n                tileRows.push(tile);\n            }\n        }\n        if (index === 6 || index === 8) {\n            for (let i = 0; i < tilePerRow; i++) {\n                let tileType = \"normal\";\n                if (i === 2 || i === 6 || i === 8 || i === 12) tileType = \"doubleLetter\";\n                let tile = <Tile\n                    type={tileType}\n                    id={tileRow + i}\n                    setRequestChoosePiece={setRequestChoosePiece}\n                    key={tileRow + i}\n                    ref={el => tileRefs.current[tileRow + i] = el}\n                />;\n                tileRows.push(tile);\n            }\n        }\n        if (index === 7) {\n            for (let i = 0; i < tilePerRow; i++) {\n                let tileType = \"normal\";\n                if (i === 7) tileType = \"startTile\";\n                if (i === 0 || i === 14) tileType = \"tripleWord\";\n                if (i === 3 || i === 11) tileType = \"doubleLetter\";\n                let tile = <Tile\n                    type={tileType}\n                    id={tileRow + i}\n                    key={tileRow + i}\n                    setRequestChoosePiece={setRequestChoosePiece}\n                    ref={el => tileRefs.current[tileRow + i] = el}\n                />;\n                tileRows.push(tile);\n            }\n        }\n\n        // Push the entire tile row\n        rows.push(<div className=\"flex border-opacity-100\" key={index}> {tileRows} </div>);\n    }\n\n\n    const getTile = (refIndex) => tileRefs.current[refIndex];\n    const removePieceFromTile = (refIndex) => getTile(refIndex).removePiece();\n    const addPieceToTile = (refIndex, piece) => getTile(refIndex).addPiece(piece);\n\n\n    // Returns if a passed in tile and position is at\n    // the edge of the board in said position\n    const isBoardEdge = (position, index) => {\n        if (position === 'top') {\n            return index >= 0 && index < 15;\n        }\n        else if (position === 'bottom') {\n            return index > 209 && index < 225;\n        }\n        else if (position === 'left') {\n            return (index % 15) === 0;\n        }\n        else { // Implicit right\n            return (index % 15) === 14;\n        }\n    }\n\n\n    // Get words that were played\n    const getPlayedWords = () => {\n        let wv, wh, words = [];\n\n        for (const tileIndex of playedTiles.current) {\n            let thisTile = getTile(tileIndex).getPiece();\n\n            // Get words at the left, right, top, and bottom\n            let wordsTop = getPiecesInPosition(tileIndex, \"top\");\n            let wordsLeft = getPiecesInPosition(tileIndex, \"left\");\n            let wordsDown = getPiecesInPosition(tileIndex, \"bottom\");\n            let wordsRight = getPiecesInPosition(tileIndex, \"right\");\n\n            // English words are read left-right/top-bottom. \n            // Extract in same manner\n            wv = [...wordsTop, thisTile, ...wordsDown];\n            wh = [...wordsLeft, thisTile, ...wordsRight];\n\n            // Skip the empty and single words\n            if (wv.length > 1) words.push(wv);\n            if (wh.length > 1) words.push(wh);\n        }\n\n        // Return non-duplicates\n        return words.filter((v, i, a) => a.findIndex(t => (JSON.stringify(t) === JSON.stringify(v))) === i);\n    }\n\n\n    // Returns the word(s) at the position of the piece at index\n    const getPiecesInPosition = (index, position) => {\n        let ind, loopLength, words = [];\n\n        if (position === \"right\" || position === \"left\") loopLength = 1;\n        else loopLength = 15; // Implicit top or down\n\n        if (isBoardEdge(position, index)) return words;\n\n        while (true) {\n            // Go forward for right and down. Go backwards, otherwise\n            if (position === \"right\" || position === \"bottom\") ind = index + loopLength\n            else ind = index - loopLength;\n\n            let tile = getTile(ind); // Get the tile at said index on board\n\n            if (tile.hasPiece()) {\n                // Right and below should be appended to the end of th word list.\n                // Left and above should be prepended.\n                if (position === \"right\" || position === \"bottom\") words.push(tile.getPiece())\n                else words.unshift(tile.getPiece());\n\n                if (position === \"right\" || position === \"left\") loopLength += 1\n                else loopLength += 15;\n\n                // After getting the piece, check if the piece is at\n                // the edge of the board. If it is, then exit, as there\n                // will be nothing in the next position.\n                if (isBoardEdge(position, ind)) break;\n            }\n            else break;\n        }\n\n        return words\n    }\n\n\n    // Handle modal for choosing letter\n    const modalHandler = (piece) => {\n\n        // Create a transformed blank piece\n        let transformedBlankPiece = <Piece\n            // isPlayed={true}\n            weight={0}\n            char={piece}\n            onBoard={true}\n            isTransformed={true}\n            id={requestChoosePiece.current.pieceID}\n            tileID={requestChoosePiece.current.tileID}\n        />;\n\n        // Add piece to tile\n        addPieceToTile(requestChoosePiece.current.tileID, transformedBlankPiece);\n\n        // Tell parent for possible removal\n        setPlayedTiles([...playedTiles.current, requestChoosePiece.current.tileID]);\n\n        // Tell other players\n        sio.emit('inPlayEvent', {\n            roomID: player.current.roomID,\n            pieceData: {\n                weight: 0,\n                char: piece,\n                onBoard: true,\n                isTransformed: true,\n                id: requestChoosePiece.current.pieceID,\n                tileID: requestChoosePiece.current.tileID,\n            }\n        });\n\n        // Switch Off modal\n        setRequestChoosePiece({ tileID: \"\", pieceID: \"\", status: false });\n    }\n\n\n    const saveBoardState = () => {\n        let state = [];\n        for (const tileIndex of usedTiles.current) {\n            state.push(getTile(tileIndex).getPiece());\n        }\n        setBoardState(state);\n    }\n\n\n    // Save board state in interval (autosave)\n    useEffect(() => {\n        let iID = setInterval(() => {\n            saveBoardState();\n        }, timeoutDelay);\n\n        setPingIntervalID(iID);\n        return () => clearInterval(pingIntervalID);\n    }, []); // [] Ensures only on first render\n\n\n    // If game is to be exited, save board state\n    useEffect(() => {\n        if (gameExited.current) saveBoardState();\n    }, [gameExited.current]);\n\n\n    // Restore board state if used tiles are present\n    // on the first render. See below for hackiness\n    // [Hacky]: Use data in current used tiles to\n    // restore all pieces; after, restore the used\n    // tiles to contain only tileIDs, as is normal\n    useEffect(() => {\n        if (usedTiles.current.length > 0) {\n            // Add all played pieces to tile\n            for (const piece of usedTiles.current) {\n                let playedPiece = <Piece\n                    id={piece.id}\n                    onBoard={true}\n                    isPlayed={true}\n                    char={piece.char}\n                    weight={piece.weight}\n                    tileID={piece.tileID}\n                    isTransformed={piece.isTransformed}\n                />;\n                addPieceToTile(piece.tileID, playedPiece);\n            }\n            // Rewrite used tiles to store only tileIDs\n            setUsedTiles(usedTiles.current.map(t => t.tileID));\n        }\n    }, []); // [] Ensures only on first render\n\n\n    return (\n        <div className=\"space-y-4 \">\n            <div style={{ height: \"fit-content\" }} className=\"block border-8 border-black rounded-md\"> {rows} </div>\n            <Legend />\n            <Modal modalHandler={modalHandler} mode=\"chooseLetter\" show={requestChoosePiece.current.status} />\n        </div>\n    )\n};\n\nexport default GameBoard;","import React, { useState, useEffect, useContext } from 'react';\nimport { Wifi, WifiOff, Save } from 'react-feather';\nimport makeServerRequest from '../xhr';\nimport { GameContext } from '../context';\nimport { timeoutDelay } from '../constants';\n\nconst iconSize = 26;\n\nconst Connection = (props) => {\n    let icon, iconStatus;\n\n    // State\n    const [ping, setPing] = useState(1);\n    const [status, setStatus] = useState(\"on\");\n    const [showSave, setShowSave] = useState(false);\n    const [pingIntervalID, setPingIntervalID] = useState();\n    const { player, boardState, rackState } = useContext(GameContext);\n\n\n    // Server ping\n    useEffect(() => {\n        let iID = setInterval(() => {\n            pingServer();\n            saveGame();\n        }, timeoutDelay);\n\n        setPingIntervalID(iID);\n        return () => clearInterval(pingIntervalID);\n\n    }, []); // [] ensures only on first render\n\n\n    // Server ping duration\n    const pingServer = async () => {\n        let startTime = new Date(); // Record start time\n\n        // Make request\n        let response = await makeServerRequest({ requestType: 'get', url: `/ping`, payload: {} });\n\n        // If successful\n        if (response && response.status === \"pingSuccess\") {\n            let endTime = new Date(); // Record end time\n\n            let pingDuration = endTime.getTime() - startTime.getTime();\n            setPing(pingDuration); // Save difference\n\n            // Set Icon\n            if (pingDuration < 120) setStatus(\"on\");\n            else if (pingDuration < 500) setStatus(\"warning\");\n            else setStatus(\"off\");\n        }\n        else setStatus(\"off\");\n    }\n\n\n    // Save board and player rack\n    const saveGame = async () => {\n        setShowSave(true);\n\n        let payload = {\n            player: player.current,\n            rack: rackState.current,\n            board: boardState.current,\n            roomID: player.current.roomID,\n        }\n\n        let response = await makeServerRequest({ requestType: 'post', url: `/cache`, payload: payload });\n\n        // If successful\n        if (response && response.status === \"success\") {\n            // Nice\n        }\n\n        setTimeout(() => {\n            setShowSave(false);\n        }, 2000);\n    }\n\n\n    // Determine icon\n    if (status === \"on\") {\n        iconStatus = \"Connection is good\";\n        icon = <Wifi size={iconSize} color=\"#1fe03d\" />;\n    }\n    else if (status === \"off\") {\n        iconStatus = \"Server disconnected. Trying to reconnect\";\n        icon = <WifiOff size={iconSize} color=\"#f32b0c\" />;\n    }\n    else {\n        icon = <Wifi size={iconSize} color=\"#ffd100\" />\n        iconStatus = \"Connection is poor. Delays may occur\";\n    }\n\n    return (\n        <div className=\"flex justify-between items-center\">\n            <div className=\"flex space-x-1 flex-none text-gray-400\">\n                {showSave ? <>\n                    <div className=\"cursor-help flex-none\"><Save size={23} /></div>\n                    <div>Saving...</div></>\n                    : null}\n            </div>\n            <div className=\"flex space-x-1\">\n                <div title={iconStatus} className=\"cursor-help flex-none\">{icon}</div>\n                <div title=\"Server ping\" className=\"cursor-help flex-none text-gray-500\">{ping}ms</div>\n            </div>\n        </div>\n\n    );\n};\n\nexport default Connection;","import { Volume2, Radio, Mic, User } from 'react-feather';\nimport React, { useContext, useEffect } from 'react';\nimport { GameContext } from '../context';\nimport { useStateRef } from '../hooks';\nimport { countUp } from '../utils';\n\n\nconst ScoreBoard = () => {\n\n    const [_, setBoard, board] = useStateRef([]);\n    const { player, players } = useContext(GameContext);\n    \n    useEffect(() => {\n        let tableRows = [];\n        for (const [index, p] of players.current.entries()) {\n            let tableRow = <tr key={index}>\n                <td className={`text-left capitalize border ${p.turn ? \"font-bold\" : \"\"} border-gray-300 px-4 py-2 text-black-600 font-medium`}>\n                    {p.name}\n                    <span className=\"inline pl-1\">{player.current.name === p.name ? <span title={`This is You${p.turn ? \". It's also your turn to play\" : \"\"}`}><User title=\"You\" size={22} className=\"inline pb-1\" fill=\"black\" strokeWidth={1} /> </span> : null}</span>\n                    <span className=\"inline\">{p.isSpeaking ? <span title=\"This person is currently recording\"> <Radio size={22} className=\"inline pb-1\" /></span> : null}</span>\n                </td>\n                <td className=\"border border-gray-300 px-4 py-2 text-black-600 font-medium\">{countUp(p.score)}</td>\n            </tr>\n            tableRows.push(tableRow);\n        }\n        setBoard(tableRows);\n    }, [player.current, players.current]);\n\n    return (\n        <div className=\"flex justify-end\">\n            <table className=\"table-auto w-80\">\n                <thead>\n                    <tr className=\"bg-gray-100\">\n                        <th className=\"text-left border border-gray-300 px-4 py-2 text-black-600\">Player</th>\n                        <th className=\"border border-gray-300 px-4 py-2 text-black-600\">Score</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {board.current}\n                </tbody>\n            </table>\n        </div>\n    )\n};\n\nexport default ScoreBoard;","import React, { useContext, useEffect } from 'react';\nimport { AlertCircle, Bell, } from 'react-feather';\nimport { NotificationContext } from '../context';\nimport { useStateRef } from '../hooks';\n\nconst Notification = (props) => {\n\n    // let ns = [];\n    const { notifications } = useContext(NotificationContext);\n    const [_, setTimeoutNotifications, timeoutNotifications] = useStateRef([]);\n\n    useEffect(() => {\n        for (const [index, notification] of notifications.current.entries()) {\n\n            let classNames, iconType;\n\n            if (notification.type === \"info\") {\n                iconType = <AlertCircle size={22} />;\n                classNames = \"bg-blue-100 flex items-center border border-blue-300 text-blue-900 px-4 py-4 rounded relative\";\n            }\n            else if (notification.type === \"success\") {\n                iconType = <Bell size={22} />;\n                classNames = \"bg-green-100 flex items-center border border-green-300 text-green-800 px-4 py-4 rounded relative\";\n            }\n            else if (notification.type === \"error\") {\n                iconType = <AlertCircle size={22} />;\n                classNames = \"bg-red-100 flex items-center border border-red-300 text-red-800 px-4 py-4 rounded relative\";\n            }\n            else if (notification.type === \"warning\") {\n                iconType = <AlertCircle size={22} />;\n                classNames = \"bg-yellow-100 flex items-center border border-yellow-300 text-yellow-800 px-4 py-4 rounded relative\";\n            }\n            else {\n                iconType = <Bell size={22} />;\n                classNames = \"bg-center-100 flex items-center text-white center-500 text-center-800 px-4 py-4 rounded relative\";\n            }\n\n            let newNotification = <div key={index}>\n                <div className={classNames}>\n                    <span className=\"inline pr-4\">{iconType}</span>\n                    <span className=\"inline text-left\">{notification.message}</span>\n                </div>\n                <div className=\"pb-2\"></div>\n            </div>;\n\n            // Add to state\n            setTimeoutNotifications([newNotification]);\n        }\n    }, [notifications.current]);\n\n    return (timeoutNotifications.current)\n};\n\nexport default Notification;","import React, { useRef, useEffect } from \"react\";\nimport { useStateRef } from \"../hooks\";\nimport Piece from \"./Piece\";\nimport { Check, X } from \"react-feather\";\n\nexport default function SwapModal(props) {\n\n    const checkBoxRefs = useRef([]);\n    const [_, setShowConfirm, showConfirm] = useStateRef(false);\n\n    // Create new ref to each tile until all tiles have been referenced\n    useEffect(() => {\n        checkBoxRefs.current = Array(props.pieces.length)\n            .fill().map((_, i) => checkBoxRefs.current[i]);\n    }, [props.pieces.length]);\n\n\n    const handleOnChange = (e) => {\n        let checkedBoxes = checkBoxRefs.current.filter((checkBox) => checkBox.checked === true);\n        if (checkedBoxes.length > 0) setShowConfirm(true)\n        else setShowConfirm(false);\n    }\n\n    // Only need the IDs to swap pieces\n    const getCheckedBoxesIDs = () => {\n        let checkedBoxes = [];\n        for (const checkBox of checkBoxRefs.current) {\n            if (checkBox.checked === true) checkedBoxes.push(checkBox.id);\n        }\n        return checkedBoxes;\n    }\n\n    return props.show ? <>\n        <div className=\"justify-center items-center flex overflow-x-hidden overflow-y-auto fixed inset-0 z-50 outline-none focus:outline-none\">\n            <div className=\"relative w-auto my-6 mx-auto max-w-3xl\">\n                <div className=\"border-0 rounded-lg shadow-lg relative flex flex-col w-full bg-white outline-none focus:outline-none\">\n                    <div className=\"flex justify-center flex-col pt-7 p-3 border-b border-solid border-blueGray-200 rounded-t\">\n                        <h3 className=\"text-2xl font-semibold\">\n                            Exchange Pieces for a Turn\n                        </h3>\n                        <div className=\"text-md pt-1 text-gray-500\">Use the checkboxes to select the pieces to swap</div>\n                    </div>\n                    <div className=\"relative flex flex-col p-10 pb-9 pt-8 flex justify-center flex-wrap\">\n                        <div className=\"flex justify-center block\">{\n                            props.pieces.map((piece, index) => {\n                                return (\n                                    <div key={index} className=\"mx-4 my-4 mt-2\">\n                                        <Piece isStatic={true} char={piece.piece} weight={piece.weight} />\n                                        <div className=\"self-center mt-1 text-xs text-gray-900\">\n                                            <label className=\"inline-flex items-center\">\n                                                <input onChange={handleOnChange} id={piece.id} ref={el => checkBoxRefs.current[index] = el} type=\"checkbox\" />\n                                            </label>\n                                        </div>\n                                    </div>\n                                );\n                            })\n                        }\n                        </div>\n                        <div className=\"my-4 mb-2 space-x-6 block\">\n                            <button onClick={() => { setShowConfirm(false); props.swapCancelHandler() }} className=\"w-32 bg-red-600 hover:bg-red-700 text-white inline font-bold py-2 px-4 border border-red-700 rounded\">\n                                <X className=\"inline\" strokeWidth={3} size={22} />\n                                <span className=\"pl-1 pr-2 text-md\">Cancel</span>\n                            </button>\n                            {showConfirm.current ? <button onClick={() => { props.swapConfirmHandler(getCheckedBoxesIDs()) }} className=\"w-36 bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 border border-green-700 rounded\">\n                                <Check className=\"inline\" strokeWidth={3} size={22} />\n                                <span className=\"pl-1 pr-2 text-md\">Confirm</span>\n                            </button> : null}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div className=\"opacity-75 fixed inset-0 z-40 bg-black\"></div>\n    </> : null\n}","import React from 'react';\nimport { RotateCcw, Play, Shuffle, Repeat, SkipForward, Loader } from 'react-feather';\n\nconst descriptions = {\n    \"play\": \"Play as turn\",\n    \"shuffle\": \"Shuffle pieces on Rack\",\n    \"recall\": \"Recall played pieces\",\n    \"swap\": \"Swap pieces in place of turn\",\n    \"skip\": \"Skip turn\",\n    \"draw\": \"Start the game\",\n}\n\nconst ControlButton = ({ type, size, handler }) => {\n    let icon, className;\n\n    // Set css class\n    if (type === \"play\") {\n        className = \"flex justify-center items-center hover:border-l-2 hover:border-green-600 bg-green-500 hover:bg-green-700 text-white font-bold w-12 h-12 border-green-600 hover:border-green-500\";\n    }\n    else if (type === \"draw\") {\n        className = \"flex justify-center items-center hover:border-l-2 hover:border-yellow-300 bg-yellow-200 hover:bg-yellow-300 text-black font-normal px-10 w-12 h-12 border-2 border-yellow-300 hover:border-yellow-300\";\n    }\n    else {\n        className = \"flex justify-center items-center bg-blue-600 border-r-2 border-blue-700  hover:bg-blue-700 text-white font-bold w-12 h-12 border-blue-600 hover:border-blue-700\";\n    }\n\n    // Set button icon\n    if (type === \"recall\") icon = <RotateCcw strokeWidth=\"2.5\" size={size} />\n    else if (type === \"play\") icon = <Play fill=\"white\" strokeWidth=\"2.5\" size={size} />\n    else if (type === \"shuffle\") icon = <Shuffle strokeWidth=\"2.5\" size={size} />\n    else if (type === \"swap\") icon = <Repeat strokeWidth=\"2.5\" size={size} />\n    else if (type === \"skip\") icon = <SkipForward strokeWidth=\"2.5\" size={size} />\n    else if (type === \"draw\") icon = \"Draw\"\n\n    const loader = <button className={`${className}`}>\n        <Loader strokeWidth={3} size={22} className=\"animate-spin\" />\n    </button>\n\n    return (\n        <button title={descriptions[type]} className={`${className}`} onClick={handler}>\n            {icon}\n        </button>\n    )\n}\n\nexport default ControlButton;","import { useContext, useEffect } from \"react\";\nimport { useReactMediaRecorder } from \"react-media-recorder\";\nimport { GameContext, SocketIOContext } from \"../context\";\nimport { Mic, MicOff } from \"react-feather\";\nimport { useStateRef } from \"../hooks\";\n\n\n\nconst Audio = () => {\n    const {\n        mediaBlobUrl,\n        clearBlobUrl,\n        stopRecording,\n        startRecording,\n    } = useReactMediaRecorder({ audio: { type: \"audio/ogg\" }, askPermissionOnMount: true });\n\n\n    const sio = useContext(SocketIOContext);\n    const [_, setIsMuted, isMuted] = useStateRef(true);\n    const [__, setAudioBlob, audioBlob] = useStateRef(null);\n    const [___, setSpeakerName, speakerName] = useStateRef(\"\");\n    const { player, setPlayer, players, setPlayers } = useContext(GameContext);\n\n\n    const toggleAudioMute = () => {\n        isMuted.current === false ? setIsMuted(true) : setIsMuted(false);\n    }\n\n    const transmitAudio = () => {\n        clearBlobUrl(); // Clear any blob\n        startRecording(); // Start audio\n        stopRecording(); // Stop audio\n    }\n\n    useEffect(() => {\n        if (!isMuted.current) {\n            transmitAudio();\n            setPlayer({ ...player.current, isSpeaking: true });\n        }\n        else {\n            stopRecording();\n            setPlayer({ ...player.current, isSpeaking: false });\n        }\n\n        sio.emit(\"radioEvent\", {\n            audioBlob: mediaBlobUrl,\n            roomID: player.current.roomID,\n            speakerName: player.current.name,\n            isSpeaking: player.current.isSpeaking,\n        });\n\n    }, [mediaBlobUrl, isMuted.current]);\n\n\n    useEffect(() => {\n        sio.on(\"audioTransmission\", (data) => {\n            // Update other players\n            let updatedPlayers = [];\n            for (const p of players.current) {\n                if (data.speakerName === p.name) {\n                    if (data.isSpeaking) p['isSpeaking'] = true;\n                    else p['isSpeaking'] = false;\n                }\n                updatedPlayers.push(p);\n            }\n\n            setAudioBlob(null);\n            setPlayers(updatedPlayers);\n            setAudioBlob(data.audioBlob);\n            setSpeakerName(data.speakerName);\n        });\n    }, []);\n\n\n    return (\n        <div>\n            <button\n                title={isMuted.current ? \"Audio off. Click to record\" : \"Audio is recording. Click to stop\"}\n                onClick={toggleAudioMute}\n                className=\"flex justify-center items-center hover:border bg-yellow-200 hover:bg-yellow-300 text-white font-bold w-12 h-12 border border-yellow-400 hover:border-yellow-200\">\n                {isMuted.current ? <MicOff color=\"black\" strokeWidth=\"2.5\" size={20} /> : <Mic color=\"black\" strokeWidth=\"2.5\" size={20} />}\n            </button>\n\n            {/* Only play audio that doesn't originate from me */}\n            {!player.current.isSpeaking // I'm not speaking\n                && audioBlob.current    // Theres' audio to play\n                && speakerName.current !== player.current.name // Audio isn't mine\n                ? <audio className=\"hidden\" src={audioBlob.current} autoPlay />  // Create element and play\n                : null\n            }\n        </div>\n    );\n};\n\nexport default Audio;","import React, { useContext, useEffect } from 'react';\nimport ControlButton from './ControlButton';\nimport Audio from './Audio';\nimport { GameContext } from '../context';\nimport { useStateRef } from '../hooks';\n\nconst iconSize = 20;\n\n\nconst Controls = (props) => {\n    const { player, gameStarted, allowAudio } = useContext(GameContext);\n    const [_, setControlButtons, controlButtons] = useStateRef([]);\n\n    useEffect(() => {\n        let buttons = [];\n        // Push global buttons\n        for (const [index, type] of [\"recall\", \"shuffle\", \"swap\", \"skip\", \"play\"].entries()) {\n            buttons.push(<ControlButton handler={props[type]} key={index} type={type} size={iconSize} />)\n        }\n        // If game hasn't started and player is host, show Draw button\n        if (player.current.isHost && !gameStarted.current) {\n            buttons.push(<ControlButton handler={props.draw} key={6} type={\"draw\"} size={iconSize} />)\n        }\n\n        setControlButtons(buttons);\n    }, [gameStarted.current, player.current]);\n\n    return (\n        <div className=\"flex items-center justify-center space-x-0 bg-blue-600\">\n            {allowAudio.current ? <Audio /> : null}\n            {controlButtons.current}\n        </div>\n    )\n}\n\nexport default Controls;","import React from 'react';\nimport { countDown } from '../utils';\nimport { ShoppingBag } from 'react-feather';\nimport Modal from './Modal';\nimport { useStateRef } from '../hooks';\n\nconst Bag = ({ bag }) => {\n\n    const [_, setShowContents, showContents] = useStateRef(false);\n\n    return (\n        <div title={`${bag.length} pieces remaining`} onClick={() => setShowContents(!showContents.current)} className=\"flex items-end space-x-0\">\n            <div className=\"flex-none\"><ShoppingBag className=\"cursor-pointer\" fill=\"gray\" size={36} /></div>\n            <div className=\"flex-none cursor-pointer text-gray-500 text-sm\">{countDown(bag.length)}</div>\n            <Modal show={showContents.current} />\n        </div>\n    )\n}\n\nexport default Bag;","import React, { useEffect, useState, useRef, useContext } from 'react';\nimport { SocketIOContext, ValidDragContext, GameContext, NotificationContext } from '../context';\nimport { excludeMeSioEvent, getDragData, inPlaceShuffle, secondsToMMSS } from '../utils';\nimport { useStateRef } from '../hooks';\nimport makeServerRequest from '../xhr';\nimport { Clock } from 'react-feather';\nimport SwapModal from './SwapModal';\nimport Controls from './Controls';\nimport Piece from './Piece';\nimport Bag from './Bag';\nimport { timeoutDelay } from '../constants';\n\n\n\nconst Rack = (props) => {\n\n    const thisRack = useRef();\n    const [pingIntervalID, setPingIntervalID] = useState();\n    const [_c, setTryCount, tryCount] = useStateRef(0);\n    const [_, setPieces, currPieces] = useStateRef([]);\n    const [__, setStartSwap, startSwap] = useStateRef(false);\n    const [__d, setCountDownID, countDownID] = useStateRef(\"\");\n    const [___, setPlayedPieces, currPlayedPieces] = useStateRef([]);\n\n    const sio = useContext(SocketIOContext);\n    const { setValidDrag } = useContext(ValidDragContext);\n    const { notifications, setNotifications } = useContext(NotificationContext);\n    const { player, gameResumed, gameExited, rackState, setRackState, setPlayer, bag, setPlayedWords, setPlayFlag, gameStarted, timeToPlay, playedTiles, playedWords, usedTiles, gameEnded, setRecallFlag } = useContext(GameContext);\n    const [_a_, setCountDown, countDown] = useStateRef(timeToPlay.current);\n\n\n    // Get 7 pieces when game starts\n    useEffect(() => {\n        async function getPieces() {\n            if (currPieces.current.length === 0) {\n                setPieces(await getFromBag(7));\n            }\n        }\n\n        // If game is resumed, use set pieces, \n        // else if new game, fetch pieces from server\n        if (rackState.current.length !== 0) {\n            setPieces(rackState.current);\n            setTimeout(() => {\n                sio.emit(\"resumeEvent\", { roomID: player.current.roomID });\n                setRackState([]);\n            }, 1000);\n        }\n        else getPieces();\n    }, []); // [] ensures only on first render\n\n\n    // If game ends, recompute score and announce\n    useEffect(async () => {\n        if (gameEnded.current) {\n            let score = player.current.score;\n\n            // Decrement each piece's weight from score\n            for (const piece of currPieces.current) score -= piece.weight\n\n            let response = await makeServerRequest({\n                requestType: \"post\",\n                url: \"/scores\",\n                payload: {\n                    score: score,\n                    name: player.current.name,\n                    roomID: player.current.roomID,\n                },\n            });\n            if (response.status === \"success\") setPlayer({ ...player.current, turn: false })\n        }\n    }, [gameEnded.current]);\n\n\n    // Effect from Game board\n    useEffect(async () => {\n        if (playedWords.current.length > 0) {\n\n            // Have three chances to play validly\n            // After three, turn is auto skipped\n            if (tryCount.current >= 3) {\n                actualTurnSkip(); // Auto skip turn\n                setTryCount(0); // Reset play chances\n                return;\n            }\n\n            // Get the played words as a list of strings, instead of a list of object strings\n            let playedWordsStr = playedWords.current.map(word => word.map(char => char.char).join(\"\"));\n\n            // Validate the played words from the Scrabble DB\n            let response = await validatePlayedWords(playedWordsStr);\n\n            if (response.status === \"error\") {\n                // Increment play chances\n                setTryCount(tryCount.current + 1);\n\n                setNotifications([{\n                    type: \"error\",\n                    message: response.message,\n                }]);\n            }\n            else {\n                // Determine if bag is already empty when player played\n                let bagIsEmpty = bag.current.length === 0;\n\n                // Determine if rack is empty (all pieces were played)\n                let rackIsEmpty = currPieces.current.length === 0;\n\n                // Compute the score from played words and get the actual played word\n                let playedWord = getPlayedWord(playedWordsStr, currPlayedPieces.current)\n                let score = computeScore(playedWords.current, currPlayedPieces.current.length === 7)\n\n                // Refill rack\n                await refillRack(currPlayedPieces.current.length);\n\n                // Reset played pieces\n                setPlayedPieces([]);\n\n                // Tell everybody\n                sio.emit('playEvent', {\n                    score: score,\n                    word: playedWord,\n                    bagIsEmpty: bagIsEmpty,\n                    rackIsEmpty: rackIsEmpty,\n                    name: player.current.name,\n                    roomID: player.current.roomID,\n                });\n\n                // Remove timer when play happens\n                clearInterval(countDownID.current);\n\n                setPlayedWords([]); // Reset played words\n                setTryCount(0); // Reset play chances\n            }\n        }\n    }, [playedWords.current]);\n\n\n    // Play timer implementation\n    useEffect(() => {\n        // Set the default countdown\n        setCountDown(timeToPlay.current);\n\n        // If there's a count down and it's the player's turn\n        if (timeToPlay.current && player.current.turn) {\n            let intervalID = setInterval(() => {\n                // Countdown and auto skip turn\n                if (countDown.current === 0) actualTurnSkip(); // Skip\n                else setCountDown(countDown.current - 1); // Decrement \n            }, 1000);\n\n            setCountDownID(intervalID); // Store intervalID\n            return () => clearInterval(countDownID.current);\n        }\n    }, [player.current.turn]);\n\n\n    // Get actual played word\n    // Strategy is to weigh each played word by the\n    // pieces played from the rack and choose highest\n    const getPlayedWord = (playedWords, playedPieces) => {\n        let playedWord, wordWeight = 0;\n\n        for (const word of playedWords) {\n            let weight = 0;\n            for (const piece of playedPieces) {\n                if (word.includes(piece.piece)) weight += 1\n            }\n\n            if (weight > wordWeight) {\n                playedWord = word;\n                wordWeight = weight;\n            }\n        }\n        return playedWord;\n    }\n\n\n    // Compute total score of played words\n    const computeScore = (playedWords, isBingo) => {\n\n        let totalScore = 0;\n\n        // For each played word\n        for (const word of playedWords) {\n            // Word score and multiiplier\n            let score = 0, mul = 1;\n\n            // For each character...\n            for (const char of word) {\n                let charWeight = 0;\n                let charTileID = char.tileID;\n                let charTileType = char.tileType;\n\n                // Already cemented tiles? Skip special attrs\n                if (usedTiles.current.includes(charTileID)) {\n                    charWeight = char.weight;\n                }\n                else {\n                    // Update score per tile type\n                    if (charTileType === \"doubleLetter\") {\n                        charWeight = char.weight * 2;\n                    }\n                    else if (charTileType === \"doubleWord\" || charTileType === \"startTile\") {\n                        mul *= 2;\n                        charWeight = char.weight;\n                    }\n                    else if (charTileType === \"tripleWord\") {\n                        mul *= 3;\n                        charWeight = char.weight;\n                    }\n                    else if (charTileType === \"tripleLetter\") {\n                        charWeight = char.weight * 3;\n                    }\n                    // Normal tile\n                    else charWeight = char.weight;\n                }\n\n                score += charWeight; // Score based on weight\n            }\n\n            score *= mul; // Update with multiplier\n\n            // Update total score\n            totalScore += score;\n        }\n\n        // If Bingo, add 50 points\n        totalScore = isBingo ? totalScore + 50 : totalScore;\n\n        return totalScore;\n    }\n\n\n    // Validate words from the server\n    const validatePlayedWords = async (playedWordsStr) => {\n        let response = await makeServerRequest({\n            url: '/validate',\n            requestType: 'post',\n            payload: { words: playedWordsStr },\n        });\n\n        return response;\n    }\n\n\n    // Get passed amount from bag\n    const getFromBag = async (amount) => {\n        let response = await makeServerRequest({\n            payload: {},\n            requestType: 'get',\n            url: `/bag/${amount}?roomID=${player.current.roomID}`,\n        });\n        let returnedPieces = response['pieces'];\n        for (const [index, piece] of Object.entries(returnedPieces)) {\n            piece[\"id\"] = `${index}_${piece.id}`;\n        }\n        return returnedPieces\n    }\n\n    // Refill rack\n    const refillRack = async (amount) => {\n        let pieces = await getFromBag(amount);\n        for (const piece of pieces) addToPieces(piece);\n    }\n\n    // After drag ends, get equivalent piece\n    // on Rack. Done in case of removal\n    const dragEndHandler = (pieceData) => {\n        let playedPiece = findPiece(pieceData, currPieces.current);\n        removePieceFromPieces(playedPiece);\n        addToPlayedPieces(playedPiece);\n    }\n\n    const removePieceFromPieces = (playedPiece) => {\n        let remainingPieces = currPieces.current.filter(piece => piece.id !== playedPiece.id);\n        setPieces([...remainingPieces]);\n    }\n\n    const removePieceFromPlayedPieces = (playedPiece) => {\n        let remainingPieces = [...currPlayedPieces.current].filter(piece => piece.id !== playedPiece.id);\n        setPlayedPieces([...remainingPieces]);\n    }\n\n\n    // Turn off modal\n    const swapCancelHandler = () => setStartSwap(false);\n\n    const getTileRow = (tile) => {\n        tile += 1;\n        return Math.ceil(tile / 15);\n    }\n\n    const getTileColumn = (tile) => {\n        tile += 1;\n        return tile % 15;\n    }\n\n    const getPlayDirection = (playedTiles) => {\n\n        // Sort the tiles in ascending order for use\n        playedTiles = playedTiles.sort((a, b) => a - b);\n\n        let playDirection;\n        let firstTile = playedTiles[0];\n        let firstTileRow = getTileRow(firstTile);\n        const numPlayedTiles = playedTiles.length;\n\n        // If all played tiles are on the same row, then horizontal\n        if (playedTiles.every((t) => getTileRow(t) === firstTileRow)) {\n            playDirection = \"horizontal\";\n        }\n\n        // If not, check if they're all on the same column. If yes, \n        // then it's a vertical play. If not, then it's an invalid play\n        else {\n            for (let i = 0; i < numPlayedTiles; i++) {\n                if ((i + 1) < numPlayedTiles) {\n                    let tt = playedTiles[i]; // this tile\n                    let nt = playedTiles[i + 1]; // next tile\n\n                    // Difference between each\n                    // tile must be fifteen for\n                    // the play to be vertical.\n                    if ((nt - tt) % 15 !== 0) {\n                        playDirection = \"both\";\n                        break;\n                    }\n\n                    playDirection = \"vertical\";\n                }\n            }\n        }\n\n        return playDirection;\n    }\n\n    // If swap is confirmed, get pieces of checked boxes\n    // and remove them from rack. Replace them after and\n    // then disable the swap modal for later reswapping \n    const swapConfirmHandler = async (checkedIDs) => {\n        if (checkedIDs.length > 0) {\n            let piecesSwapped = [];\n\n            // Remove associated ids from rack\n            for (const id of checkedIDs) {\n                let pieceToSwap = findPieceByID(id, currPieces.current);\n                removePieceFromPieces(pieceToSwap);\n                piecesSwapped.push(pieceToSwap);\n            }\n\n            // Remove timer when play happens\n            clearInterval(countDownID.current);\n\n            setStartSwap(false); // Turn off modal\n\n            // Refill rack\n            await refillRack(checkedIDs.length);\n\n            // Announce to everybody\n            sio.emit('playEvent', {\n                piecesSwapped,\n                isTurnSwapped: true,\n                name: player.current.name,\n                roomID: player.current.roomID,\n            });\n        }\n    }\n\n    // Get tiles played on a row or column within the\n    // bounds of the first and last tile the player played\n    const getNeigbouringTiles = (tile, playDirection, playedTiles) => {\n        let tiles = [], allTiles = [];\n        let source = playDirection === \"horizontal\" ? getTileRow(tile) : getTileColumn(tile);\n\n        let loopLength = playDirection === \"horizontal\" ? 1 : 15;\n        let startTile = playDirection === \"horizontal\" ? (source - 1) * 15 : source - 1;\n\n        // Loop fifteen tiles, that is\n        // all tiles in row or column\n        for (let i = 0; i < 15; i++) {\n            // Get played tiles\n            if (playedTiles.includes(startTile)) tiles.push(startTile)\n\n            // Push irregardless\n            allTiles.push(startTile)\n            startTile += loopLength;\n        }\n\n        let first = allTiles.indexOf(tiles[0]);\n        let last = allTiles.indexOf(tiles[tiles.length - 1])\n\n        // Return tile range between \n        // played/cemented tiles\n        return allTiles.slice(first, last + 1);\n    }\n\n\n    // Validate that each played piece is linked\n    // (left, right, top, bottom) to another piece\n    const validateNeighbors = (playedTiles, boardIsEmpty, playDirection) => {\n        let valid = true;\n        let linkCount = 0;\n        let lastTile = playedTiles[playedTiles.length - 1];\n\n        let tiles = getNeigbouringTiles(lastTile, playDirection, playedTiles)\n\n        // Ensure no blanks in between played/cemented tiles\n        // AND logic heirarchy is cemented then played\n        for (const tile of tiles) {\n            if (!usedTiles.current.includes(tile) && !playedTiles.includes(tile)) {\n                valid = false;\n                return valid;\n            }\n        }\n\n        // Ensure played tiles are linked to existing\n        for (const tile of playedTiles) {\n            let linkedTiles = [];\n            let tileUp, tileDown, tileLeft, tileRight;\n\n            tileUp = tile - 15;\n            tileLeft = tile - 1;\n            tileDown = tile + 15;\n            tileRight = tile + 1;\n\n            if (tileUp >= 0) linkedTiles.push(tileUp)\n            if (tileLeft >= 0) linkedTiles.push(tileLeft)\n\n            if (tileDown <= 224) linkedTiles.push(tileDown)\n            if (tileRight <= 224) linkedTiles.push(tileRight)\n\n            // Check all linked tiles\n            linkedTiles.forEach((tileTC) => {\n                // If game has started, at least one tile must be linked to existing tiles\n                if (!boardIsEmpty && usedTiles.current.includes(tileTC)) linkCount += 1;\n            });\n        }\n\n        // Must be linked to at least one existing tile\n        if (!boardIsEmpty && linkCount < 1) valid = false\n\n        return valid\n    }\n\n\n    // Start the play pipeline. Validate neighbors, played words, etc.\n    const initiatePlayPipeline = (playedTiles, boardIsEmpty) => {\n        let playDirection = getPlayDirection(playedTiles);\n        let neighborsAreValid = validateNeighbors(playedTiles, boardIsEmpty, playDirection);\n\n        // Must play in just one direction or weird play move\n        if (playDirection === \"both\" || !neighborsAreValid) {\n            setNotifications([{\n                type: \"error\",\n                message: \"Sorry, that's an invalid move\",\n            }]);\n        }\n        // Switch to gameboard to \n        // validate played words\n        else setPlayFlag(true);\n    }\n\n\n    // Play for turn\n    const play = () => {\n        if (gameEnded.current) {\n            setNotifications([{\n                type: \"info\",\n                message: \"The game has ended. No more actions are possible.\",\n            }]);\n            return;\n        }\n\n        // If it's the player's turn and the game has started\n        if (player.current.turn && (gameStarted.current || gameResumed.current)) {\n\n            // If nothing was played. Warn player...\n            if (currPlayedPieces.current.length === 0) {\n                setNotifications([{\n                    type: \"warning\",\n                    message: \"You haven't played anything. You can alternatively skip your turn\",\n                }]);\n            }\n\n            // If something was played\n            else {\n                let boardIsEmpty = isBoardEmpty();\n\n                // If the board is empty (Game literally just started)\n                if (boardIsEmpty) {\n\n                    // Ensure star tile is played on, on first play\n                    if (!playedTiles.current.includes(112)) {\n                        setNotifications([{\n                            type: \"error\",\n                            message: \"Invalid start move. You must play on the starred tile\",\n                        }]);\n\n                        return; // Exit\n                    }\n                }\n\n                // Star tile was played on. Continue play\n                // Game has been ongoing. Star tile is already used\n                initiatePlayPipeline(playedTiles.current, boardIsEmpty);\n            }\n        }\n    }\n\n\n    // Swap pieces for turn\n    const swap = () => {\n        if (gameEnded.current) {\n            setNotifications([{\n                type: \"info\",\n                message: \"The game has ended. No more actions are possible.\",\n            }]);\n            return;\n        }\n\n        if (player.current.turn && (gameStarted.current || gameResumed.current)) {\n            // Pieces in bag must be more than 7 to swap\n            if (bag.current.length <= 7) {\n                setNotifications([\n                    {\n                        message: `Swapping pieces is no longer possible, as the bag has ${bag.current.length} pieces left. `,\n                        type: \"info\",\n                    }\n                ]);\n            }\n            else {\n                recall();\n                setStartSwap(true);\n            }\n        }\n        else {\n            setNotifications([\n                {\n                    message: `You can not swap pieces until it is your turn to play. Kindly wait your turn`,\n                    overwrite: false,\n                    type: \"warning\",\n                    timeout: 5\n                }\n            ]);\n        }\n\n    }\n\n    // Recall pieces from board\n    const recall = () => {\n\n        if (gameEnded.current) {\n            setNotifications([{\n                type: \"info\",\n                message: \"The game has ended. No more actions are possible.\",\n            }]);\n            return;\n        }\n\n        if (player.current.turn && (gameStarted.current || gameResumed.current)) {\n            // Merge back played pieces to current pieces on rack\n            setPieces([...currPieces.current, ...currPlayedPieces.current]);\n\n            // Reset played pieces\n            setPlayedPieces([]);\n\n            // Signal a recall happened to empty board\n            setRecallFlag(true);\n\n            // Tell everybody\n            sio.emit('recallEvent', {\n                roomID: player.current.roomID,\n                name: player.current.name\n            }\n            );\n        }\n        else {\n            setNotifications([\n                ...notifications.current,\n                {\n                    message: `You can not recall pieces until it's your turn to play. Kindly wait your turn`,\n                    overwrite: false,\n                    type: \"warning\",\n                    timeout: 5\n                }\n            ]);\n        }\n    }\n\n    // Board is empty if there are no cemented tiles\n    const isBoardEmpty = () => usedTiles.current.length === 0;\n\n    // Shuffle pieces on Rack\n    const shuffle = () => setPieces([...inPlaceShuffle(currPieces.current)]);\n\n    // Make draw to determine player turns\n    const draw = () => sio.emit(\"drawEvent\", { roomID: player.current.roomID });\n\n    // Implementation of a turn skip\n    const actualTurnSkip = () => {\n        recall(); // Recall pieces, if any\n\n        // Tell everybody\n        sio.emit('playEvent', {\n            isTurnSkipped: true,\n            name: player.current.name,\n            roomID: player.current.roomID,\n        });\n\n        // Remove timer when play happens\n        clearInterval(countDownID.current);\n    }\n\n    // Skip one's turn\n    const skip = () => {\n        if (gameEnded.current) {\n            setNotifications([{\n                type: \"info\",\n                message: \"The game has ended. No more actions are possible.\",\n            }]);\n            return;\n        }\n\n        if (player.current.turn && (gameStarted.current || gameResumed.current)) {\n            let shouldSkipTurn = window.confirm(\"Are you sure you want to skip your turn?\");\n            if (shouldSkipTurn) actualTurnSkip();\n        }\n        else {\n            setNotifications([\n                ...notifications.current,\n                {\n                    message: `You can not skip turn until it is your turn to play. Kindly wait your turn`,\n                    overwrite: false,\n                    type: \"warning\",\n                    timeout: 5\n                }\n            ]);\n        }\n    }\n\n\n    // Helper functions\n    const addToPieces = (piece) => setPieces([...currPieces.current, piece])\n    const findPieceByID = (pieceID, source) => source.find(piece => piece.id === pieceID);\n    const findPiece = (pieceData, source) => source.find(piece => piece.id === pieceData.id);\n    const addToPlayedPieces = (playedPiece) => setPlayedPieces([...currPlayedPieces.current, playedPiece]);\n\n\n    // Event listeners\n    const handleDragDrop = (e) => {\n        if (player.current.turn) {\n            // Prevent bubble\n            e.preventDefault();\n            e.stopPropagation();\n            e.stopImmediatePropagation();\n\n            // Data of piece dragged on it          \n            const pieceData = getDragData(e);\n\n            // Don't allow drags of cemented tiles\n            if (!usedTiles.current.includes(pieceData.tileID)) {\n                // Get piece dragged back from the ones in rack state\n                let piece = findPiece(pieceData, currPlayedPieces.current);\n\n                // Tell other players\n                sio.emit('inPlayEvent', {\n                    roomID: player.current.roomID,\n                    pieceData: { ...pieceData, toRackMove: true }\n                });\n\n                if (pieceData.onBoard) { // If board-to-rack drag\n                    removePieceFromPlayedPieces(piece);\n                    addToPieces(piece);\n                }\n                else setValidDrag(false); // Rack-to-rack drag. Do nothing.\n            }\n        }\n    }\n\n    // useEffect(() => {\n    //     window.addEventListener('beforeunload', alertUser);\n    //     window.addEventListener('unload', handleGameExit);\n    //     return () => {\n    //         window.removeEventListener('beforeunload', alertUser);\n    //         window.removeEventListener('unload', handleGameExit);\n    //     }\n    // }, []);\n\n    // const alertUser = e => {\n    //     e.preventDefault()\n    //     e.returnValue = ''\n    // }\n\n    // setGamedExited(true);\n\n\n    // const handleGameExit = async () => {\n    //     await saveGame(); // Save the game state\n    //     alert(\"Note that you can still resume this game session using your name and the session ID.\");\n\n    //     setTimeout(() => {\n    //         sio.emit(\"leave\", { roomID: player.current.roomID, name: player.current.name })\n    //     }, 700); \n    // }\n\n\n    const saveRackState = () => {\n        // Save the pieces on the rack as well as any played pieces\n        if (currPieces.current.length > 0 || currPlayedPieces.current.length > 0) {\n            setRackState([...currPieces.current, ...currPlayedPieces.current]);\n        }\n    }\n\n\n    // Save rack state in interval (autosave)\n    useEffect(() => {\n        let iID = setInterval(() => {\n            saveRackState();\n        }, timeoutDelay);\n\n        setPingIntervalID(iID);\n        return () => clearInterval(pingIntervalID);\n    }, []); // [] Ensures only on first render\n\n\n    // If game is to be exited, save board state\n    useEffect(() => {\n        if (gameExited.current) saveRackState();\n    }, [gameExited.current]);\n\n\n    // useEffect(async () => {\n    //     if (gameExited.current) {\n    //         await handleGameExit();\n    //         window.location.reload(); // Refresh page (go to home page)                            \n    //     }\n    // }, [gameExited.current]);\n\n\n    const handleDragOver = (e) => e.preventDefault();\n    const handleDragEnter = (e) => e.preventDefault();\n    const handleDragLeave = (e) => e.preventDefault();\n\n    // Effects\n    useEffect(() => thisRack.current.addEventListener(\"drop\", handleDragDrop));\n    useEffect(() => thisRack.current.addEventListener(\"dragover\", handleDragOver));\n    useEffect(() => thisRack.current.addEventListener(\"dragleave\", handleDragLeave));\n    useEffect(() => thisRack.current.addEventListener(\"dragenter\", handleDragEnter));\n\n    const classNames = (gameStarted.current || gameResumed.current) ? \"flex justify-between items-end\" : \"flex justify-end items-end\";\n\n    // Render\n    return (\n        <div className=\"block\">\n            <div ref={thisRack} className=\"flex justify-end\">\n                <div style={{ width: \"25rem\" }} className=\"h-16 flex border-4 bg-gray-300 border-gray-500 rounded-md\">\n                    {currPieces.current ? currPieces.current.map((piece, index) => {\n                        if (piece) return <Piece\n                            id={piece.id}\n                            key={`${piece.id}_${index}`}\n                            onBoard={false}\n                            char={piece.piece}\n                            weight={piece.weight}\n                            dragEndHandler={dragEndHandler}\n                        />\n\n                    }) : null}\n                </div>\n            </div>\n            <div className=\"py-2\"></div>\n            <div className={classNames}>\n\n                {/* Show bag only when game has started */}\n                {gameStarted.current || gameResumed.current ? <Bag bag={bag.current} /> : null}\n\n                <Controls\n                    gameStarted={gameStarted}\n                    shuffle={shuffle}\n                    recall={recall}\n                    skip={skip}\n                    play={play}\n                    draw={draw}\n                    swap={swap}\n                />\n            </div>\n            <div className=\"py-2\"></div>\n            {player.current.turn && timeToPlay.current\n                ?\n                <div title=\"Time left to play\" className={`${countDown.current < 10 ? 'blink' : \"\"} cursor-help flex text-gray-400 justify-end items-center`}>\n                    <Clock size={19} className=\"inline\" />\n                    <span className=\"pl-1\">{secondsToMMSS(countDown.current)}</span>\n                </div>\n                :\n                null}\n\n            <SwapModal\n                show={startSwap.current}\n                pieces={currPieces.current}\n                swapCancelHandler={swapCancelHandler}\n                swapConfirmHandler={swapConfirmHandler}\n            />\n        </div>\n\n    )\n};\n\nexport default Rack;","import React from \"react\";\n\nexport default function GameLogModal({ logs, close, show }) {\n\n    let modal = <>\n        <div onClick={() => close()} className=\"justify-center items-center flex overflow-x-hidden overflow-y-auto fixed inset-0 z-50 outline-none focus:outline-none\">\n            <div className=\"relative w-screen my-6 mx-auto max-w-3xl\">\n                <div className=\"h-96 border-0 rounded-lg shadow-lg relative flex flex-col w-full bg-white outline-none focus:outline-none\">\n                    <div className=\"flex justify-center flex-col pt-7 p-3 border-b border-solid border-blueGray-200 rounded-t\">\n                        <h3 className=\"text-2xl font-semibold\">\n                            Logs\n                        </h3>\n                        <div className=\"text-md pt-1 text-gray-500\">History of in-game plays</div>\n                    </div>\n                    <div className=\"overflow-auto py-0 justify-center\">\n                        {logs.length > 0 ?\n                            <table className=\"table-auto w-full mb-5\">\n                                <thead>\n                                    <tr className=\"bg-gray-100\">\n                                        <th className=\"border border-gray-300 px-4 py-2 text-black-600\">Time</th>\n                                        <th className=\"border border-gray-300 px-4 py-2 text-black-600\">Event</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {logs.map((log, index) => {\n                                        return <tr key={index}>\n                                            <td className='w-1/5 text-gray-500 capitalize border border-gray-300 px-4 py-2 text-black-600 font-medium'>\n                                                {log.time}\n                                            </td>\n                                            <td className=\"border border-gray-300 px-4 py-2 text-black-600 font-medium\">{log.event}</td>\n                                        </tr>\n                                    })}\n                                </tbody>\n                            </table>\n\n                            : <div className=\"flex pt-28 text-gray-500 justify-center\">Nothing to show :)</div>}\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div className=\"opacity-75 fixed inset-0 z-40 bg-black\"></div>\n    </>\n\n    return (show.current ? modal : null);\n}","import React, { useContext, useEffect } from 'react';\nimport { FileText, Share2, LogOut } from 'react-feather';\nimport { GameContext, SocketIOContext } from '../context';\nimport { useStateRef } from '../hooks';\nimport { excludeMeSioEvent } from '../utils';\nimport makeServerRequest from '../xhr';\n\nimport GameLogModal from './GameLogModal';\n\n\nconst GameLog = (props) => {\n    const sio = useContext(SocketIOContext);\n    const [_, setShowModal, showModal] = useStateRef(false);\n    const [__, setLogs, logs] = useStateRef([]);\n    const { player, rackState, boardState, setGameExited } = useContext(GameContext);\n\n    // Close modal\n    const closeModal = () => setShowModal(false);\n\n    const leaveHandler = async () => {\n        setGameExited(true); // Signal game is about to be exited, so save can happen\n\n        let confirmed = window.confirm(\"Are you sure you want to leave the game?\");\n        if (confirmed) {\n            await saveGame(); // Save the game state\n            alert(\"Note that you can still resume this game session using your name and the session ID.\");\n\n            setTimeout(() => {\n                sio.emit(\"leave\", { roomID: player.current.roomID, name: player.current.name })\n                window.location.reload(); // Refresh page (go to home page)                            \n            }, 700);\n        }\n        else setGameExited(false);\n    }\n\n\n    // Save board and player rack\n    const saveGame = async () => {\n        let payload = {\n            player: player.current,\n            rack: rackState.current,\n            board: boardState.current,\n            roomID: player.current.roomID,\n        }\n\n        await makeServerRequest({ requestType: 'post', url: `/cache`, payload: payload });\n    }\n\n\n    // If game is exited by any player, then let me know\n    // Also save the game first\n    useEffect(() => {\n        sio.on(\"leftRoom\", async (data) => {\n            if (data.name !== player.current.name) {\n                await saveGame();\n                alert(`${data.name} has left the game session. Note that you can still resume this game session using your name and the session ID.`);\n                setTimeout(() => {\n                    window.location.reload(); // Refresh page (go to home page)                                            \n                }, 1700);\n            }\n        });\n    }, []);\n\n\n    // Get logs from the server when div is pressed\n    useEffect(async () => {\n        if (showModal.current) {\n            let response = await makeServerRequest({\n                requestType: \"get\",\n                url: `/logs/${player.current.roomID}`,\n            });\n\n            if (response.status === \"success\") setLogs([...response.logs])\n        }\n    }, [showModal.current]);\n\n    return (\n        <>\n            <div className=\"flex justify-between items-center\">\n                <div onClick={() => setShowModal(true)} className=\"cursor-pointer flex justify-end items-end space-x-1 text-gray-500\">\n                    <div className=\"flex-none\">{<FileText size={22} />}</div>\n                    <div className=\"flex-none text-sm\">Game Logs</div>\n                </div>\n                <div className=\"flex justify-end items-end space-x-1\">\n                    <div className=\"font-bold pt-2 text-sm text-gray-500\"><Share2 size={22} className=\"inline pb-1 pr-1\" />{player.current.roomID}\n                    </div>\n                </div>\n                <div onClick={leaveHandler} className=\"flex cursor-pointer justify-end items-end space-x-1\">\n                    <div className=\"font-bold pt-2 text-sm text-red-500\"><LogOut size={22} className=\"inline pb-1 pr-1\" />Leave\n                    </div>\n                </div>\n            </div>\n            <GameLogModal logs={logs.current} close={closeModal} show={showModal} />\n        </>\n    );\n};\n\nexport default GameLog;","import React from 'react';\nimport Connection from './Connection';\nimport ScoreBoard from './ScoreBoard';\nimport Notification from './Notification';\n\nimport Rack from './Rack';\nimport GameLog from './GameLog';\n\nconst GamePanel = (props) => {\n    return (\n        <div className=\"flex flex-col pt-4 pb-10 justify-around w-450\">\n            <div className=\"block\">\n                <Notification />\n            </div>\n            <div className=\"block py-8\">\n                <Connection status=\"off\" />\n            </div>\n            <div className=\"block py-8\">\n                <ScoreBoard />\n            </div>\n            <div className=\"block py-8\">\n                <div className=\"flex justify-end\">\n                    <Rack />\n                </div>\n            </div>\n            <div className=\"block\">\n                <div className=\"pt-1\">\n                    <GameLog />\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default GamePanel;","import React from 'react';\nimport { Plus, ChevronsRight, CornerUpRight } from 'react-feather';\n\nconst GameChooser = (props) => {\n\n    return (\n        <div className=\"h-full w-full flex flex-col items-center justify-center\">\n            <div className=\"block flex justify-center text-gray-800 text-bold text-3xl space-x-2\">\n                <div className=\"text-4xl\">\n                    Scrabble\n                </div>\n                <div className=\"bg-yellow-200 px-2 font-normal rounded-md text-black self-center text-sm border\">\n                    v2.4\n                </div>\n            </div>\n            <div className=\"flex my-6 mb-2 space-x-6 block justify-center\">\n                <button title=\"Create a new game session\" onClick={() => props.setGameChoice(\"new\")} className=\"h-12 w-36 bg-green-600 hover:bg-green-700 text-white font-bold px-4 border border-green-700 rounded inline-flex justify-center items-center\">\n                    <Plus strokeWidth={3} size={26} />\n                    <span className=\"pl-1 pr-2 text-md\">Host</span>\n                </button>\n                <button onClick={() => props.setGameChoice(\"join\")} className=\"h-12 w-36 bg-blue-600 hover:bg-blue-700 text-white font-bold px-4 border border-blue-700 rounded inline-flex justify-center items-center\">\n                    <ChevronsRight strokeWidth={3} size={26} />\n                    <span title=\"Join a game session\"  className=\"pl-1 pr-2 text-md\">Join</span>\n                </button>\n                <button onClick={() => props.setGameChoice(\"resume\")} className=\"h-12 w-36 bg-red-600 hover:bg-red-700 text-white font-bold px-4 border border-red-700 rounded inline-flex justify-center items-center\">\n                    <CornerUpRight strokeWidth={3} size={22} />\n                    <span title=\"Resume a game session\"  className=\"pl-1 pr-1 text-md\">Resume</span>\n                </button>\n            </div>\n            <div className=\"flex my-4 mb-2 space-x-6 block justify-center\">\n                <div className=\"text-gray-400\">Familiarize yourself with the <a className=\"text-blue-500\" href=\"https://github.com/olumidesan/scrabble\" target=\"_blank\" referrerPolicy=\"no-referrer\">Game Notes</a> before you begin</div>\n            </div>\n        </div>\n    )\n};\n\nexport default GameChooser;","import React, { useEffect, useContext } from 'react';\nimport { Trash2, Users, Share2 } from 'react-feather';\nimport { GameContext, NotificationContext, SocketIOContext } from '../context';\nimport { useStateRef } from '../hooks';\nimport { countUp } from '../utils';\n\n\nconst WaitingRoom = (props) => {\n    const sio = useContext(SocketIOContext);\n    const { setNotifications } = useContext(NotificationContext);\n    const [_, setConnectedPlayers, connectedPlayers] = useStateRef([]);\n    const [_s, setPrepText, prepText] = useStateRef(\"Preparing game room...\");\n    const { player, setRackState, setGameStarted, setGameResumed, setGameCreated, setAllowAudio, setPlayers, setUsedTiles, setTimeToPlay } = useContext(GameContext);\n\n\n    useEffect(() => {\n        // Set self as connected. ??? Network issue\n        setConnectedPlayers([player.current]);\n\n        // Register socket io listeners\n        sio.on(\"joinedRoom\", (data) => {\n\n            // Set up audio chat and timer\n            setTimeToPlay(data.timeToPlay);\n            setAllowAudio(data.enableAudio);\n\n            // Overwrite my list of connected players\n            // with what the server sent, as it's updated\n            setConnectedPlayers(data.connectedPlayers);\n\n            // If it's not my connection event\n            // if (data.player.name !== player.current.name) {\n                // Game should start if the required number of players is reached and I'm the host\n                if (connectedPlayers.current.length === props.numPlayers && player.current.isHost) {\n                    sio.emit(data.mode === 'create' ? \"gameCreateEvent\" : \"gameResumeEvent\", { roomID: props.roomID });\n                }\n            // }\n        });\n\n\n        // When game is created, overwrite \n        // players with what host sent\n        // and signal that game has started\n        sio.on(\"gameCreate\", (data) => {\n\n            let welcomeMessage = player.current.isHost\n                ? \"Make a draw using the yellow button on your button rack. You'll\"\n                : \"The host will make a draw, and you'll\";\n\n            setNotifications([\n                {\n                    message: `Welcome, ${player.current.name}! ${welcomeMessage} be notified (just like this) of who gets to play first. Good luck! 🍀`,\n                    overwrite: false,\n                    type: \"info\",\n                }\n            ]);\n\n            setPlayers(data.allPlayers);\n\n            // Dilly-dally for effect\n            setTimeout(() => {\n                setPrepText(\"Fetching game bag...\")\n            }, 1500);\n\n            setTimeout(() => {\n                setGameCreated(true);\n            }, 3500);\n\n        }, []);\n\n        // When game is resumed, overwrite \n        // players with what host sent\n        // and signal that game has started\n        sio.on(\"gameResume\", (data) => {\n\n            setNotifications([\n                {\n                    message: `Welcome back, ${player.current.name}. Again, Good luck! 🍀`,\n                    overwrite: false,\n                    type: \"info\",\n                }\n            ]);\n\n            setPlayers(data.allPlayers);\n\n            // Replace already played tiles on board\n            setUsedTiles(data.usedTiles);\n\n            // Replace rack\n            setRackState(data.rack[player.current.name])\n\n            // Dilly-dally for effect\n            setTimeout(() => {\n                setPrepText(\"Fetching your pieces...\")\n            }, 1500);\n\n            // Dilly-dally for effect\n            setTimeout(() => {\n                setPrepText(\"Resuming board state...\")\n            }, 3500);\n\n            setTimeout(() => {\n                setGameStarted(true);\n                setGameResumed(true);\n            }, 5500);\n\n        }, []);\n    }, []);\n\n\n    return (\n        <div className=\"h-full w-full flex flex-col items-center justify-center\">\n            <div className=\"max-w-sm pt-4 w-96 rounded overflow-hidden shadow-2xl\">\n                <div className=\"px-8 flex justify-between items-center w-full py-4\">\n\n                    <div className=\"font-bold text-left text-2xl\">Waiting Room\n                    </div>\n                    <div title=\"Share this ID with players you want to join your game session\" className=\"cursor-help font-bold pt-2 text-sm text-gray-400\"><Share2 size={23} className=\"inline pb-1 pr-1\" />{props.roomID}\n                    </div>\n\n                </div>\n                <div className=\"py-8 px-6 border-t border\">\n                    <Users size={22} className=\"inline\" /> Connected players: {countUp(connectedPlayers.current.length)}/<span className=\"font-bold\">{props.numPlayers}</span>\n                </div>\n                {connectedPlayers.current.length === props.numPlayers\n                    ?\n                    <div className=\"py-4 border-t border\">\n                        <div className=\"text-sm italic text-gray-500\">{prepText.current}</div>\n                    </div>\n                    :\n                    null}\n                <div className=\"py-4 border-t border\">\n                    {connectedPlayers.current.map((p, index) => {\n                        return <div key={index} className=\"text-sm text-gray-500\">{p.name === player.current.name ? `You (${p.name})` : p.name} joined the game room</div>\n                    })\n                    }\n                </div>\n                {player.current.isHost\n                    ?\n                    <div className=\"h-14 border-t border\">\n                        <button onClick={props.handleDestroyGameSession} className=\"h-full w-full bg-red-600 hover:bg-red-700 text-white font-bold border border-red-700 inline-flex justify-center items-center\">\n                            <Trash2 size={22} />\n                            <span className=\"pl-1 pr-2 text-md\">Delete Session</span>\n                        </button>\n                    </div>\n                    :\n                    null\n                }\n            </div>\n        </div>\n    )\n};\n\nexport default WaitingRoom;","import React, { useContext, useState } from 'react';\nimport { CornerUpRight, X } from 'react-feather';\nimport WaitingRoom from './WaitingRoom';\nimport makeServerRequest from '../xhr';\nimport { GameContext, SocketIOContext } from '../context';\nimport { isAlphanumeric } from '../utils';\n\nconst ResumeGame = (props) => {\n    const [numPlayers, setNumPlayers] = useState(0);\n    const [gameResumed, setGameResumed] = useState(false);\n    const [sessionID, setSessionID] = useState({ valid: true, message: \"\", roomID: \"\" });\n    const [sessionName, setSessionName] = useState({ valid: true, message: \"\", name: \"\" });\n\n    const sio = useContext(SocketIOContext);\n    const { setPlayer } = useContext(GameContext);\n\n\n    const handleNameChange = (e) => {\n        setSessionName({ ...sessionName, valid: true, name: e.target.value.trim() });\n    }\n\n    const handleRoomIDChange = (e) => {\n        setSessionID({ ...sessionID, valid: true, roomID: e.target.value.trim() });\n    }\n\n    const getGameRoomData = async (gameRoomID, mode) => await makeServerRequest({ requestType: 'get', url: `/room/${gameRoomID}?name=${sessionName.name}&mode=${mode}`, payload: {} });\n\n    const handleResumeGameSession = async () => {\n\n        // Validate length\n        if (sessionName.name.length < 2 || sessionName.name.length > 10) {\n            setSessionName({ ...sessionName, valid: false, message: \"Name must be between 2 and 10 characters\" });\n            return;\n        }\n\n        // Validate alphanumerism\n        if (!isAlphanumeric(sessionName.name)) {\n            setSessionName({ ...sessionName, valid: false, message: \"Name must be alphanumeric\" });\n            return;\n        }\n\n        // Validate game room length\n        if (sessionID.roomID.length < 11) {\n            setSessionID({ ...sessionID, valid: false, message: \"Session ID must be 11 characters\" });\n            return;\n        }\n\n        const gameRoomData = await getGameRoomData(sessionID.roomID, 'resume');\n\n        // If no game is created with that room/session ID\n        if (gameRoomData.status === \"error\") {\n            setSessionID({ ...sessionID, valid: false, message: gameRoomData.message });\n        }\n        // If no such name existed in game session\n        else if (gameRoomData.status === \"nameError\") {\n            setSessionName({ ...sessionName, valid: false, message: gameRoomData.message });\n        }\n\n        else {\n            const currentPlayer = {\n                turn: false, // Leave turn initially\n                isSpeaking: false,\n                roomID: sessionID.roomID,\n                score: gameRoomData.player.score,\n                isHost: gameRoomData.player.isHost,\n                name: sessionName.name.capitalize(),\n            };\n\n            sio.emit(\"resume\", { roomID: sessionID.roomID, player: currentPlayer });\n            setNumPlayers(gameRoomData.limit);\n            setPlayer(currentPlayer);\n            setGameResumed(true);\n        }\n    }\n\n    let classNames = `${sessionName.valid ? \"mb-4\" : \"mb-0\"} w-80 appearance-none block bg-gray-100 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500`\n\n    return (\n        gameResumed\n            ?\n            <WaitingRoom roomID={sessionID.roomID} numPlayers={numPlayers} />\n            :\n            <div className=\"h-full w-full flex flex-col items-center justify-center\">\n                <div className=\"font-medium text-xl pb-3\">Resume a Game Session</div>\n\n                <div className=\"justify-center flex flex-col pt-4 w-96 rounded overflow-hidden shadow-2xl\">\n                    <div className=\"flex self-center pt-6 mx-3 mb-1\">\n                        <div className=\"px-3\">\n                            <label className=\"block uppercase text-left tracking-wide text-gray-700 text-xs font-bold mb-1\">\n                                Previous Session Name\n                            </label>\n                            <input minLength={3} maxLength={10} onChange={handleNameChange} title=\"Your name\" className={classNames} type=\"text\" placeholder=\"E.g. Joey\" />\n                        </div>\n                    </div>\n                    <div className=\"flex self-center wrap mx-3\">\n                        {!sessionName.valid\n                            ?\n                            <div className=\"w-full px-3\">\n                                <div className=\"w-80 md:flex md:items-center\">\n                                    <span className=\"text-sm text-red-600 mb-4\">\n                                        {sessionName.message}\n                                    </span>\n                                </div>\n                            </div>\n                            :\n                            null\n                        }\n                    </div>\n                    <div className=\"flex self-center mx-3 mb-0\">\n                        <div className=\"px-3\">\n                            <label className=\"block uppercase text-left tracking-wide text-gray-700 text-xs font-bold mb-2\">\n                                Previous Session ID\n                            </label>\n                            <input onChange={handleRoomIDChange} maxLength={11} className=\"w-80 appearance-none block bg-gray-100 text-gray-700 border border-gray-200 rounded py-3 px-4 mb-1 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\" type=\"text\" placeholder=\"E.g. 41828-11860\" />\n                        </div>\n                    </div>\n                    <div className=\"flex self-center wrap mx-3 mb-6\">\n                        {!sessionID.valid\n                            ?\n                            <div className=\"w-full px-3\">\n                                <div className=\"w-80  md:flex md:items-center\">\n                                    <span className=\"text-sm text-red-600 pb-2\">\n                                        {sessionID.message}\n                                    </span>\n                                </div>\n                            </div>\n                            :\n                            null\n                        }\n                    </div>\n                    <div className=\"h-14 border-t flex border\">\n                        <div className=\"block w-1/2\">\n                            <button onClick={() => props.setGameChoice(\"cancel\")} className=\"h-full w-full bg-red-600 hover:bg-red-700 text-white font-bold border border-red-700 inline-flex justify-center items-center\">\n                                <X size={26} />\n                                <span className=\"pl-1 pr-2 text-md\">Cancel</span>\n                            </button>\n                        </div>\n                        <div className=\"block w-1/2\">\n                            <button onClick={handleResumeGameSession} className=\"h-full w-full bg-green-600 hover:bg-green-700 text-white font-bold border border-green-700 inline-flex justify-center items-center\">\n                                <CornerUpRight className=\"pb\" strokeWidth={3} size={26} />\n                                <span className=\"pl-1 pr-2 text-md\">Resume</span>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n    )\n};\n\nexport default ResumeGame;","import React, { useContext, useState } from 'react';\nimport { ChevronsRight, X } from 'react-feather';\nimport WaitingRoom from './WaitingRoom';\nimport makeServerRequest from '../xhr';\nimport { GameContext, SocketIOContext } from '../context';\nimport { isAlphanumeric } from '../utils';\n\nconst JoinGame = (props) => {\n\n    const [numPlayers, setNumPlayers] = useState(0);\n    const [gameJoined, setGameJoined] = useState(false);\n    const [sessionID, setSessionID] = useState({ valid: true, message: \"\", roomID: \"\" });\n    const [sessionName, setSessionName] = useState({ valid: true, message: \"\", name: \"\" });\n\n    const sio = useContext(SocketIOContext);\n    const { setPlayer } = useContext(GameContext);\n\n\n    const handleNameChange = (e) => {\n        setSessionName({ ...sessionName, valid: true, name: e.target.value.trim() });\n    }\n\n    const handleRoomIDChange = (e) => {\n        setSessionID({ ...sessionID, valid: true, roomID: e.target.value.trim() });\n    }\n\n    const getGameRoomData = async (gameRoomID, mode) => await makeServerRequest({ requestType: 'get', url: `/room/${gameRoomID}?name=${sessionName.name}&mode=${mode}`, payload: {} });\n\n    const handleJoinGameSession = async () => {\n\n        // Validate length\n        if (sessionName.name.length < 2 || sessionName.name.length > 10) {\n            setSessionName({ ...sessionName, valid: false, message: \"Name must be between 2 and 10 characters\" });\n            return;\n        }\n\n        // Validate alphanumerism\n        if (!isAlphanumeric(sessionName.name)) {\n            setSessionName({ ...sessionName, valid: false, message: \"Name must be alphanumeric\" });\n            return;\n        }\n\n        // Validate game room length\n        if (sessionID.roomID.length < 11) {\n            setSessionID({ ...sessionID, valid: false, message: \"Session ID must be 11 characters\" });\n            return;\n        }\n\n        const gameRoomData = await getGameRoomData(sessionID.roomID, 'join');\n\n        // If no game is created with that room/session ID\n        if (gameRoomData.status === \"error\") {\n            setSessionID({ ...sessionID, valid: false, message: gameRoomData.message });\n        }\n        // If chosen name is already being used\n        else if (gameRoomData.status === \"nameError\") {\n            setSessionName({ ...sessionName, valid: false, message: gameRoomData.message });\n        }\n\n        else {\n            if (gameRoomData.room.joinable) {\n                const currentPlayer = {\n                    score: 0,\n                    turn: false,\n                    isHost: false,\n                    isSpeaking: false,\n                    roomID: sessionID.roomID,\n                    name: sessionName.name.capitalize(),\n                };\n\n                sio.emit(\"join\", { roomID: sessionID.roomID, player: currentPlayer });\n                setNumPlayers(gameRoomData.room.limit);\n                setPlayer(currentPlayer);\n                setGameJoined(true);\n            }\n            else {\n                setSessionID({ valid: false, message: \"Game session has started and cannot be joined\" });\n            }\n        }\n    }\n\n    let classNames = `${sessionName.valid ? \"mb-4\" : \"mb-0\"} w-80 appearance-none block bg-gray-100 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500`\n\n    return (\n        gameJoined\n            ?\n            <WaitingRoom roomID={sessionID.roomID} numPlayers={numPlayers} />\n            :\n            <div className=\"h-full w-full flex flex-col items-center justify-center\">\n                <div className=\"font-medium text-xl pb-3\">Join a Game Session</div>\n\n                <div className=\"justify-center flex flex-col pt-4 w-96 rounded overflow-hidden shadow-2xl\">\n                    <div className=\"flex self-center pt-6 mx-3 mb-1\">\n                        <div className=\"px-3\">\n                            <label className=\"block uppercase text-left tracking-wide text-gray-700 text-xs font-bold mb-1\">\n                                Your Name\n                            </label>\n                            <input minLength={3} maxLength={10} onChange={handleNameChange} title=\"Your name\" className={classNames} type=\"text\" placeholder=\"E.g. Joey\" />\n                        </div>\n                    </div>\n                    <div className=\"flex self-center wrap mx-3\">\n                        {!sessionName.valid\n                            ?\n                            <div className=\"w-full px-3\">\n                                <div className=\"w-80 md:flex md:items-center\">\n                                    <span className=\"text-sm text-red-600 mb-4\">\n                                        {sessionName.message}\n                                    </span>\n                                </div>\n                            </div>\n                            :\n                            null\n                        }\n                    </div>\n                    <div className=\"flex self-center mx-3 mb-0\">\n                        <div className=\"px-3\">\n                            <label className=\"block uppercase text-left tracking-wide text-gray-700 text-xs font-bold mb-2\">\n                                Session ID\n                            </label>\n                            <input onChange={handleRoomIDChange} maxLength={11} className=\"w-80 appearance-none block bg-gray-100 text-gray-700 border border-gray-200 rounded py-3 px-4 mb-1 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\" type=\"text\" placeholder=\"E.g. 41828-11860\" />\n                        </div>\n                    </div>\n                    <div className=\"flex self-center wrap mx-3 mb-6\">\n                        {!sessionID.valid\n                            ?\n                            <div className=\"w-full px-3\">\n                                <div className=\"w-80  md:flex md:items-center\">\n                                    <span className=\"text-sm text-red-600 pb-2\">\n                                        {sessionID.message}\n                                    </span>\n                                </div>\n                            </div>\n                            :\n                            null\n                        }\n                    </div>\n                    <div className=\"h-14 border-t flex border\">\n                        <div className=\"block w-1/2\">\n                            <button onClick={() => props.setGameChoice(\"cancel\")} className=\"h-full w-full bg-red-600 hover:bg-red-700 text-white font-bold border border-red-700 inline-flex justify-center items-center\">\n                                <X size={26} />\n                                <span className=\"pl-1 pr-2 text-md\">Cancel</span>\n                            </button>\n                        </div>\n                        <div className=\"block w-1/2\">\n                            <button onClick={handleJoinGameSession} className=\"h-full w-full bg-green-600 hover:bg-green-700 text-white font-bold border border-green-700 inline-flex justify-center items-center\">\n                                <ChevronsRight className=\"pb\" strokeWidth={3} size={26} />\n                                <span className=\"pl-1 pr-2 text-md\">Join</span>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n    )\n};\n\nexport default JoinGame;","import React, { useContext, useRef, useState } from 'react';\nimport { Plus, ChevronDown, X, Copy, CheckCircle } from 'react-feather';\nimport { GameContext, SocketIOContext } from '../context';\nimport { generateRandomID, isAlphanumeric } from '../utils';\nimport WaitingRoom from './WaitingRoom';\n\n\n// Create a random room ID initially\nlet roomID = `${generateRandomID(5)}-${generateRandomID(5)}`;\n\nconst NewGame = (props) => {\n\n    const [copied, setCopied] = useState(false);\n    const [numPlayers, setNumPlayers] = useState(2);\n    const [timeToPlay, setTimeToPlay] = useState(null);\n    const [gameCreated, setGameCreated] = useState(false);\n    const [enableAudio, setEnableAudio] = useState(false);\n    const [sessionName, setSessionName] = useState({ valid: true, message: \"\", name: \"\" });\n\n    const sessionContainer = useRef(null);\n    const sio = useContext(SocketIOContext);\n    const { setPlayer } = useContext(GameContext);\n\n    const handleNameChange = (e) => {\n        setSessionName({ ...sessionName, valid: true, name: e.target.value.trim() });\n    }\n\n    const handleNumPlayersChange = (e) => {\n        setNumPlayers(parseInt(e.target.value))\n    }\n\n    const handleTimeToPlayChange = (e) => {\n        if (e.target.value !== \"Disabled\") setTimeToPlay(parseInt(e.target.value))\n        else setTimeToPlay(null)\n    }\n\n    const handleEnableAudioChange = (e) => {\n        setEnableAudio(e.target.checked)\n    }\n\n    const handleDestroyGameSession = () => {\n        if (window.confirm(\"Are you sure you want to delete this game session?\")) {\n            setNumPlayers(2);\n            setEnableAudio(false);\n            setGameCreated(false);\n            props.setGameChoice(\"cancel\");\n            setSessionName({ message: \"\", valid: true, name: \"\" });\n\n            // Remove the room from server\n            sio.emit(\"leave\", { roomID });\n\n            // If room is killed, regenerate ID\n            roomID = `${generateRandomID(5)}-${generateRandomID(5)}`;\n        }\n    }\n\n    const copyToClipboard = () => {\n        navigator.clipboard.writeText(sessionContainer.current.value);\n        setCopied(true);\n        setTimeout(() => {\n            setCopied(false);\n        }, 1500);\n    }\n\n    const handleCreateGameSession = () => {\n        // Validate length\n        if (sessionName.name.length < 2 || sessionName.name.length > 10) {\n            setSessionName({ ...sessionName, valid: false, message: \"Name must be between 2 and 10 characters\" });\n            return;\n        }\n\n        // Validate alphanumerism\n        if (!isAlphanumeric(sessionName.name)) {\n            setSessionName({ ...sessionName, valid: false, message: \"Name must be alphanumeric\" });\n            return;\n        }\n\n        let currentPlayer = {\n            roomID,\n            score: 0,\n            turn: false,\n            isHost: true,\n            isSpeaking: false,\n            name: sessionName.name.capitalize(),\n        };\n\n        sio.emit(\"join\", { roomID, enableAudio, timeToPlay, player: currentPlayer, limit: numPlayers });\n        setPlayer(currentPlayer);\n        setGameCreated(true);\n    }\n\n    let classNames = `${sessionName.valid ? \"mb-4\" : \"mb-0\"} w-80 appearance-none block bg-gray-100 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500`;\n\n    return (\n        gameCreated\n            ?\n            <WaitingRoom\n                roomID={roomID}\n                numPlayers={numPlayers}\n                handleDestroyGameSession={handleDestroyGameSession}\n            />\n            :\n            <div className=\"h-full w-full flex flex-col items-center justify-center\">\n                <div className=\"font-medium text-xl pb-3\">Host a Game Session</div>\n\n                <div className=\"justify-center flex flex-col pt-4 w-96 rounded overflow-hidden shadow-2xl\">\n                    <div className=\"flex self-center pt-6 mx-3 mb-2\">\n                        <div className=\"px-3\">\n                            <label className=\"block uppercase text-left tracking-wide text-gray-700 text-xs font-bold mb-2\">\n                                Your Session ID\n                            </label>\n                            <div className=\"relative\">\n                                <input ref={sessionContainer} title=\"Automatically-generated session ID\" disabled value={roomID} className=\"w-80 cursor-not-allowed appearance-none block bg-gray-100 text-gray-700 border border-gray-200 rounded py-3 px-4 mb-3 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\" type=\"text\" placeholder=\"E.g. Joey\" />\n                                {window.location.protocol === 'https:' || window.location.hostname === 'localhost' ?\n                                    <div className=\"absolute inset-y-0 right-0 w-1/6\">\n                                        <button title=\"Copy\" onClick={copyToClipboard} className=\"h-full w-full border- rounded-r bg-gray-700 hover:bg-gray-700 text-white font-bold inline-flex justify-center items-center\">\n                                            {copied ? <CheckCircle strokeWidth={3} size={20} /> : <Copy strokeWidth={3} size={20} />}\n                                        </button>\n                                    </div> : null}\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"flex self-center mx-3 mb-1\">\n                        <div className=\"px-3\">\n                            <label className=\"block uppercase text-left tracking-wide text-gray-700 text-xs font-bold mb-1\">\n                                Your Name\n                            </label>\n                            <input minLength={3} maxLength={10} onChange={handleNameChange} title=\"Your name\" className={classNames} type=\"text\" placeholder=\"E.g. Phoebe\" />\n                        </div>\n                    </div>\n                    <div className=\"flex self-center wrap mx-3\">\n                        {!sessionName.valid\n                            ?\n                            <div className=\"w-full px-3\">\n                                <div className=\"w-80 md:flex md:items-center\">\n                                    <span className=\"text-sm text-red-600 mb-4\">\n                                        {sessionName.message}\n                                    </span>\n                                </div>\n                            </div>\n                            :\n                            null\n                        }\n                    </div>\n                    <div className=\"flex self-center flex-wrap -mx-3 mt-1 mb-4\">\n                        <div className=\"w-full px-3\">\n                            <label className=\"block uppercase text-left tracking-wide text-gray-700 text-xs font-bold mb-2\">\n                                Number of Players\n                            </label>\n                            <div className=\"relative\">\n                                <select onChange={handleNumPlayersChange} className=\"block cursor-pointer appearance-none w-80 bg-gray-100 border border-gray-200 text-gray-700 py-3 px-4 pr-8 rounded leading-tight focus:outline-none focus:bg-white focus:border-gray-500\">\n                                    <option defaultValue value={2}>Two</option>\n                                    <option value={3}>Three</option>\n                                    <option value={4}>Four</option>\n                                </select>\n                                <div className=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                                    <ChevronDown size={20} />\n                                </div>\n                            </div>\n\n                        </div>\n                    </div>\n                    <div className=\"flex self-center flex-wrap -mx-3 mt-1 mb-6\">\n                        <div className=\"w-full px-3\">\n                            <label title=\"Required time to play before turn is automatically skipped\" className=\"cursor-help block uppercase text-left tracking-wide text-gray-700 text-xs font-bold mb-2\">\n                                Time to Play\n                            </label>\n                            <div className=\"relative\">\n                                <select onChange={handleTimeToPlayChange} className=\"block cursor-pointer appearance-none w-80 bg-gray-100 border border-gray-200 text-gray-700 py-3 px-4 pr-8 rounded leading-tight focus:outline-none focus:bg-white focus:border-gray-500\">\n                                    <option defaultValue value={null}>Disabled</option>\n                                    <option value={300}>Five minutes</option>\n                                    <option value={240}>Four minutes</option>\n                                    <option value={180}>Three minutes</option>\n                                    <option value={120}>Two minutes</option>\n                                    <option value={60}>One minute</option>\n                                </select>\n                                <div className=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                                    <ChevronDown size={20} />\n                                </div>\n                            </div>\n\n                        </div>\n                    </div>\n                    {/* Audio chat is only available locally or when deployed on an SSL-enabled server */}\n                    {window.location.protocol === 'https' || window.location.hostname === 'localhost'\n                        ?\n                        <div className=\"flex self-center wrap mx-3 mb-4\">\n                            <div className=\"w-full px-3\">\n                                <div title=\"If checked, push-to-talk audio between players will be allowed. That is, of course, if the player allows it\" className=\"w-80 cursor-help md:flex md:items-center mb-2\">\n                                    <label className=\"pb-1 block text-gray-500 font-bold\">\n                                        <input onChange={handleEnableAudioChange} className=\"mr-2 leading-tight h-5 w-5\" type=\"checkbox\" />\n                                    </label>\n                                    <span className=\"text-sm pb-2\">\n                                        Enable Audio Chat (Push-To-Talk)\n                                    </span>\n                                </div>\n                            </div>\n                        </div>\n                        :\n                        null\n                    }\n                    <div className=\"h-14 border-t flex border\">\n                        <div className=\"block w-1/2\">\n                            <button onClick={() => props.setGameChoice(\"cancel\")} className=\"h-full w-full bg-red-600 hover:bg-red-700 text-white font-bold border border-red-700 inline-flex justify-center items-center\">\n                                <X size={26} />\n                                <span className=\"pl-1 pr-2 text-md\">Cancel</span>\n                            </button>\n                        </div>\n                        <div className=\"block w-1/2\">\n                            <button onClick={handleCreateGameSession} className=\"h-full w-full bg-green-600 hover:bg-green-700 text-white font-bold border border-green-700 inline-flex justify-center items-center\">\n                                <Plus className=\"pb\" strokeWidth={3} size={26} />\n                                <span className=\"pl-1 pr-2 text-md\">Host</span>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n    )\n};\n\nexport default NewGame;","import React, { useState, useEffect } from 'react';\nimport GameChooser from './GameChooser';\nimport ResumeGame from './ResumeGame';\nimport JoinGame from './JoinGame';\nimport NewGame from './NewGame';\n\nconst LandingPage = (props) => {\n\n    // State\n    const [newGame, setNewGame] = useState(false);\n    const [joinGame, setJoinGame] = useState(false);\n    const [resumeGame, setResumeGame] = useState(false);\n\n    const setGameChoice = (choice) => {\n        if (choice === \"new\") {\n            setNewGame(true);\n            setJoinGame(false);\n            setResumeGame(false);\n        }\n        else if (choice === \"join\") {\n            setJoinGame(true);\n            setNewGame(false);\n            setResumeGame(false);\n        }\n        else if (choice === \"resume\") {\n            setNewGame(false);\n            setJoinGame(false);\n            setResumeGame(true);\n        }\n        else {\n            setNewGame(false);\n            setJoinGame(false);\n            setResumeGame(false);\n        }\n    }\n\n\n    let page;\n\n    if (newGame) {\n        page = <NewGame setGameChoice={setGameChoice} />\n    }\n    else if (joinGame) {\n        page = <JoinGame setGameChoice={setGameChoice} />\n    }\n    else if (resumeGame) {\n        page = <ResumeGame setGameChoice={setGameChoice} />\n    }\n    else {\n        page = <GameChooser setGameChoice={setGameChoice} />;\n    }\n\n    return page;\n};\n\nexport default LandingPage;","import React, { useContext, useEffect, useState } from \"react\";\nimport { SocketIOContext } from \"../context\";\nimport { GameContext } from \"../context\";\nimport { ThumbsUp } from \"react-feather\";\nimport { useStateRef } from \"../hooks\";\n\nexport default function WinnerModal(props) {\n    const [_, setShow, show] = useStateRef(false);\n    const [endMessage, setEndMessage] = useState(\"\");\n\n    const sio = useContext(SocketIOContext);\n    const { player, setPlayers } = useContext(GameContext);\n\n    useEffect(() => {\n        // When the game ends. Show a modal with the winner\n        sio.on(\"gameEnd\", (data) => {\n            let finalMessage;\n            let winner = { name: \"\", score: 0 };\n\n            // Compare scores to get winner\n            for (const p of data) {\n                if (p.score > winner.score) {\n                    winner.name = p.name;\n                    winner.score = p.score;\n                }\n            }\n\n            // Construct final message\n            if (player.current.name === winner.name) {\n                finalMessage = `Congratulations, ${winner.name}! You are the winner with ${winner.score} points. You've earned the trophy!`;\n            } else {\n                finalMessage = `${winner.name} is the winner with ${winner.score} points. Good game, ${player.current.name}. You still earn a medal 🏅`;\n            }\n\n            // Update medals on score board\n            for (const p of data) {\n                if (p.name === winner.name) {\n                    p.name = `${p.name} 🏆`;\n                }\n                else p.name = `${p.name} 🏅`;\n            }\n\n            setEndMessage(finalMessage);\n            setPlayers(data);\n            setShow(true);\n        });\n    }, []);\n\n\n    let modal = <>\n        <div className=\"justify-center items-center flex overflow-x-hidden overflow-y-auto fixed inset-0 z-50 outline-none focus:outline-none\">\n            <div className=\"relative w-screen my-6 mx-auto max-w-3xl\">\n                <div className=\"border-0 rounded-lg shadow-lg relative flex flex-col w-full bg-white outline-none focus:outline-none\">\n                    <div className=\"flex justify-center flex-col pt-7 p-3 border-b border-solid border-blueGray-200 rounded-t\">\n                        <h3 className=\"text-2xl font-semibold\">\n                            🏆 The Game Has Ended 🏆\n                        </h3>\n                    </div>\n                    <div className=\"flex-col relative text-lg pt-5 pb-7 flex justify-center flex-wrap\">\n                        <div className=\"pb-6\">{endMessage}</div>\n                        <button onClick={() => { setShow(false) }} className=\"self-center bg-green-600 hover:bg-green-700 text-white inline py-2 px-4 border border-green-700 rounded\">\n                            <ThumbsUp className=\"inline pb-1\" strokeWidth={2} size={24} />\n                            <span className=\"pl-1\">Cool, Thanks</span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div className=\"opacity-75 fixed inset-0 z-40 bg-black\"></div>\n    </>\n\n    return (show.current ? modal : null);\n}","import React, { useEffect, useContext } from 'react';\nimport GameBoard from '../components/GameBoard';\nimport GamePanel from '../components/GamePanel';\nimport { useStateRef } from '../hooks';\nimport { ValidDragContext, GameContext, SocketIOContext, NotificationContext } from '../context';\nimport LandingPage from '../components/LandingPage';\nimport WinnerModal from '../components/WinnerModal';\n\n\n// [TODO] Definitely need to revamp this\n\n// Game has two played pieces store\n// The rack's own for its own use,\n// and the Game's own for use with\n// the board for clearing or comm.\nconst Game = () => {\n\n    const [e________, setGameEnded, gameEnded] = useStateRef(false);\n    const [g_______, setGameCreated, gameCreated] = useStateRef(false);\n    const [eg_______, setGameExited, gameExited] = useStateRef(false);\n    const [r_______, setGameResumed, gameResumed] = useStateRef(false);\n    const [________, setGameStarted, gameStarted] = useStateRef(false);\n    const [_sp, setPlayFlag, playFlag] = useStateRef(false);\n    const [_, setRecallFlag, recallFlag] = useStateRef(false);\n    const [_a, setAllowAudio, allowAudio] = useStateRef(false);\n    const [_s, setTimeToPlay, timeToPlay] = useStateRef(null);\n    const [__, setPlayedTiles, playedTiles] = useStateRef([]);\n    const [_b_, setBoardState, boardState] = useStateRef([]);\n    const [_r_, setRackState, rackState] = useStateRef([]);\n    const [__pw, setPlayedWords, playedWords] = useStateRef([]);\n    const [__f, setUsedTiles, usedTiles] = useStateRef([]);\n    const [___, setValidDrag, validDrag] = useStateRef(true);\n    const [____, setPlayers, players] = useStateRef([]);\n    const [_____, setPlayer, player] = useStateRef({});\n    const [______, setBag, bag] = useStateRef({ length: 0, pieces: {} });\n    const [_______, setNotifications, notifications] = useStateRef([]);\n\n    const sio = useContext(SocketIOContext);\n    const gameContext = {\n        bag, setBag,\n        player, setPlayer,\n        players, setPlayers,\n        playFlag, setPlayFlag,\n        gameEnded, setGameEnded,\n        usedTiles, setUsedTiles,\n        rackState, setRackState,\n        boardState, setBoardState,\n        allowAudio, setAllowAudio,\n        recallFlag, setRecallFlag,\n        timeToPlay, setTimeToPlay,\n        gameExited, setGameExited,\n        gameStarted, setGameStarted,\n        gameCreated, setGameCreated,\n        gameResumed, setGameResumed,\n        playedTiles, setPlayedTiles,\n        playedWords, setPlayedWords,\n    }\n\n\n    // Register listeners\n    useEffect(() => {\n        sio.on(\"resumeDone\", (data) => {\n            // Save bag\n            setBag(data.bag);\n            setGameResumed(true);\n            setGameStarted(true);\n\n\n            const updatedPlayers = [];\n            const playerToPlay = data.playerToPlay;\n            let playerToPlayMessage = \"\";\n\n            // Set turn for each player\n            for (const p of players.current) {\n                if (p.name === playerToPlay) {\n                    p['turn'] = true;\n                }\n                updatedPlayers.push(p);\n            }\n\n            // Update player's players\n            setPlayers(updatedPlayers);\n\n            // Say who gets to play first\n            if (playerToPlay === player.current.name) {\n                playerToPlayMessage = `You were to play before the game was paused`;\n                setPlayer({ ...player.current, turn: true })\n            } else {\n                playerToPlayMessage = `${playerToPlay} was to play before the game was paused`;\n            }\n\n            // Notify everyone\n            setNotifications([\n                {\n                    message: `${playerToPlayMessage}. The game has officially resumed.`,\n                    overwrite: false,\n                    type: \"info\",\n                    timeout: 5\n                }\n            ]);\n        });\n\n        sio.on(\"drawDone\", (data) => {\n            // Save bag\n            setBag(data.bag);\n            setGameStarted(true);\n\n            const updatedPlayers = [];\n            const playerToPlay = data.players[0];\n            let playerToPlayMessage, playOrderMessage = \"\";\n\n            // Set turn for each player\n            for (const p of players.current) {\n                if (p.name === playerToPlay) {\n                    p['turn'] = true;\n                }\n                updatedPlayers.push(p);\n            }\n\n            // Update player's players\n            setPlayers(updatedPlayers);\n\n            // Say who gets to play first\n            if (playerToPlay === player.current.name) {\n                playerToPlayMessage = `You get to play first`;\n                setPlayer({ ...player.current, turn: true })\n            } else {\n                playerToPlayMessage = `${playerToPlay} gets to play first`;\n            }\n\n            // Set turn order of players\n            data.players.forEach((p, index) => {\n                if (p === player.current.name) {\n                    p = `${p} (You)`;\n                }\n                if (index + 1 === data.players.length) {\n                    playOrderMessage += p;\n                } else {\n                    playOrderMessage += `${p}, then `;\n                }\n            });\n\n            // Notify everyone\n            setNotifications([\n                {\n                    message: `${playerToPlayMessage}. Also note that the turn order is, ${playOrderMessage}`,\n                    overwrite: false,\n                    type: \"info\",\n                    timeout: 5\n                }\n            ]);\n        });\n\n\n        sio.on(\"validPlay\", (data) => {\n\n            // Update the players' turns\n            updatedPlayerTurns(data.playerToPlay.name)\n\n            if (data.name === player.current.name) {\n                setPlayer({ ...player.current, score: data.updatedScore });\n            }\n\n            // Update state of all players\n            setPlayers(getUpdatedPlayers(data));\n\n            // Announce type of play\n            announcePlayResult(data)\n\n            // Cement used tiles\n            setUsedTiles([...new Set([...usedTiles.current, ...playedTiles.current])]);\n\n            // Update bag\n            setBag(data.bag);\n\n            // Give a bag length heads up\n            announceBagState(data.bag.length)\n\n            // Reset played tiles\n            setPlayedTiles([]);\n\n            // Game ends after six consecutive turn skips or empty bag and player's empty rack\n            if (data.turnSkips === 6 || (data.bagIsEmpty && data.rackIsEmpty)) setGameEnded(true);\n        });\n    }, []);\n\n\n    // Update player turns\n    const updatedPlayerTurns = (playerToPlay) => {\n        if (playerToPlay === player.current.name)\n            setPlayer({ ...player.current, turn: true })\n        else setPlayer({ ...player.current, turn: false });\n    }\n\n    // Update every players' turn on table and [poosibly] scores\n    const getUpdatedPlayers = (data) => {\n        let updatedPlayers = [];\n        for (const p of players.current) {\n            if (p.name === data.playerToPlay.name) p.turn = true;\n            else p.turn = false;\n\n            // Update all scores on scoreboard\n            if (p.name === data.name) p.score = data.updatedScore;\n            updatedPlayers.push(p);\n        }\n\n        return updatedPlayers;\n    }\n\n    // Give a heads up if bag is almost empty\n    const announceBagState = (bagLength) => {\n        if (bagLength <= 7) {\n            let emptyMessage;\n\n            if (bagLength === 0) {\n                emptyMessage = \"No pieces are left in the bag\";\n            } else if (bagLength === 1) {\n                emptyMessage = \"Only one piece is left in the bag\";\n            } else {\n                emptyMessage = `Only ${bagLength} pieces are left in the bag.`;\n            }\n\n            setTimeout(() => {\n                setNotifications([\n                    {\n                        message: `Heads up! ${emptyMessage}`,\n                        type: \"warning\",\n                    }\n                ]);\n            }, 7000);\n        }\n    }\n\n\n    // Announce type of play\n    const announcePlayResult = (data) => {\n        let message;\n        let turnPlayer = `It's ${data.playerToPlay.name === player.current.name ? \"your\" : `${data.playerToPlay.name}'s`}`;\n\n        // If turn is skipped, announce\n        if (data.isTurnSkipped) {\n            message = data.name === player.current.name\n                ? \"You skipped your turn.\"\n                : `Turn skipped by ${data.name}.`;\n            message += ` ${turnPlayer} turn to play`;\n        }\n\n        // If turn is swapped, announce\n        else if (data.isTurnSwapped) {\n            message = data.name === player.current.name\n                ? \"You swapped pieces for your turn.\"\n                : `${data.name} swapped pieces for turn.`;\n            message += ` ${turnPlayer} turn to play`;\n        }\n\n        // If a word was played, announce\n        else {\n            message = data.name === player.current.name\n                ? `You played '${data.word}' worth ${data.score} points.`\n                : `${data.name} played '${data.word}' worth ${data.score} points.`;\n            message += ` ${turnPlayer} turn to play`;\n        }\n\n        setNotifications([{ type: \"success\", message }]);\n    }\n\n\n    const gameSpace =\n        <div className=\"flex space-x-10\">\n            <GameBoard />\n            <div className=\"px-10\"></div>\n            <GamePanel />\n        </div>\n\n    return (\n        <div className=\"container mx-auto p-10 flex h-screen justify-center\">\n            <NotificationContext.Provider value={{ notifications, setNotifications }}>\n                <GameContext.Provider value={gameContext}>\n                    <ValidDragContext.Provider value={{ validDrag, setValidDrag }}>\n                        {gameCreated.current || gameResumed.current ? gameSpace : <LandingPage />}\n                        <WinnerModal />\n                    </ValidDragContext.Provider>\n                </GameContext.Provider>\n            </NotificationContext.Provider>\n        </div>\n    )\n};\n\nexport default Game;","import './App.css';\nimport Game from './containers/Game';\nimport { SocketIOContext } from './context';\n\nimport { socket } from './context';\n\nfunction App() {\n  return (\n    <SocketIOContext.Provider value={socket}>\n      <div className=\"App\">\n        <Game />\n      </div>\n    </SocketIOContext.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}